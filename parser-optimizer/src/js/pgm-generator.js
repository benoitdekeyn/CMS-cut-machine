/**
 * G√©n√©rateur de fichiers PGM √† partir des objets PGM
 */
import JSZip from 'jszip';

export const PgmGenerator = {
  /**
   * MODIFI√â: Formate une longueur en m√®tres avec d√©cimales pr√©cises (POINT comme s√©parateur pour les noms de fichiers)
   * @param {number} lengthInCm - Longueur en centim√®tres
   * @param {boolean} useComma - Si true, utilise la virgule, sinon le point
   * @returns {string} - Longueur format√©e en m√®tres
   */
  formatLengthInMeters: function(lengthInCm, useComma = false) {
    const meters = lengthInCm / 100;
    
    // Si c'est un nombre entier, pas de d√©cimales
    if (meters % 1 === 0) {
      return meters.toString();
    }
    
    // Sinon, formatage avec jusqu'√† 3 d√©cimales en supprimant les z√©ros inutiles
    const formatted = meters.toFixed(3);
    const cleanFormatted = parseFloat(formatted).toString();
    
    // Utiliser virgule ou point selon le param√®tre
    return useComma ? cleanFormatted.replace('.', ',') : cleanFormatted;
  },

  /**
   * NOUVEAU: Formate une date au format AAAA-MM-JJ_HH-mm pour les noms de fichiers
   * @param {Date} date - Date √† formater
   * @returns {string} - Date format√©e pour nom de fichier
   */
  formatDateTimeForFileName: function(date) {
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${year}-${month}-${day}_${hours}-${minutes}`;
  },

  /**
   * MODIFI√â: Formate une date au format JJ/MM/AAAA
   * @param {Date} date - Date √† formater
   * @returns {string} - Date format√©e
   */
  formatDate: function(date) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  },

  /**
   * MODIFI√â: Formate une date pour les noms de fichiers (sans slashes)
   * @param {Date} date - Date √† formater
   * @returns {string} - Date format√©e pour nom de fichier
   */
  formatDateForFileName: function(date) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}-${month}-${year}`;
  },

  /**
   * MODIFI√â: G√©n√®re le nom de fichier PGM adapt√© au nouveau format
   * @param {Object} pgmObject - Objet PGM (nouveau format)
   * @returns {string} - Nom du fichier
   */
  generatePgmFileName: function(pgmObject) {
    // NOUVEAU FORMAT : acc√®s direct aux propri√©t√©s
    const profil = pgmObject.profile;
    const longueurCm = pgmObject.length;
    const orientation = pgmObject.orientation;
    const pieces = pgmObject.pieces || [];
    
    // Longueur en m√®tres avec POINT d√©cimal pour les noms de fichiers
    const longueurMetres = this.formatLengthInMeters(longueurCm, false); // false = utiliser le point
    
    // Noms des barres (limiter √† 5 pour √©viter des noms trop longs)
    const nomsPieces = pieces.slice(0, 5).map(piece => {
      const nom = piece.nom;
      if (nom && nom.trim() !== '') {
        // Nettoyer le nom (supprimer caract√®res sp√©ciaux)
        return nom.replace(/[^a-zA-Z0-9]/g, '');
      } else {
        // Utiliser le profil + longueur si pas de nom
        return `${piece.profile}${piece.length}`;
      }
    });
    
    // Ajouter "..." si plus de 5 pi√®ces
    if (pieces.length > 5) {
      nomsPieces.push('...');
    }
    
    // Assembler le nom avec longueur pr√©cise (point d√©cimal)
    const nomFichier = `${profil}_${longueurMetres}m_${orientation}__${nomsPieces.join('-')}.pgm`;
    
    // Nettoyer le nom final (supprimer caract√®res interdits dans les noms de fichier)
    return nomFichier.replace(/[<>:"/\\|?*]/g, '_');
  },

  /**
   * G√©n√®re un fichier PGM √† partir d'un objet PGM (nouveau format)
   * @param {Object} pgmObject - Objet PGM (nouveau format)
   * @param {Object} dataManager - Instance du DataManager
   * @returns {string} - Contenu du fichier PGM
   */
  generatePgmFromObject: function(pgmObject, dataManager) {
    console.log(`üîß G√©n√©ration PGM pour ${pgmObject.profile}_${pgmObject.orientation}`);
    
    try {
      // NOUVEAU FORMAT : acc√®s direct aux propri√©t√©s
      const pieces = pgmObject.pieces || [];
      const barLength = pgmObject.length;
      
      if (!pieces || pieces.length === 0) {
        throw new Error('Aucune pi√®ce √† d√©couper dans l\'objet PGM');
      }
      
      // Prendre les donn√©es F4C de la premi√®re pi√®ce comme base pour le BODY
      const firstPiece = pieces[0];
      
      // G√©n√©rer le BODY avec les donn√©es de la premi√®re pi√®ce
      const bodyContent = this.generateBody(firstPiece, {
        profile: pgmObject.profile,
        length: barLength,
        orientation: pgmObject.orientation
      });
      
      // Grouper les pi√®ces identiques pour optimiser les STEPs
      const groupedSteps = this.groupIdenticalSteps(pieces);
      
      // G√©n√©rer les STEPs
      const stepsContent = groupedSteps.map(group => 
        this.generateStep(group.piece, group.quantity)
      ).join('\n');
      
      // Assembler le contenu final
      const pgmContent = `<!--CEB-->\n${bodyContent}\n${stepsContent}`;
      
      console.log(`‚úÖ PGM g√©n√©r√©: ${groupedSteps.length} steps pour ${pieces.length} pi√®ces`);
      
      return pgmContent;
      
    } catch (error) {
      console.error(`‚ùå Erreur g√©n√©ration PGM ${pgmObject.profile}_${pgmObject.orientation}:`, error);
      throw error;
    }
  },
  
  /**
   * MODIFI√â: G√©n√®re le contenu du BODY (adapt√© au nouveau format)
   * @param {Object} firstPiece - Premi√®re pi√®ce du PGM
   * @param {Object} motherBarInfo - Informations de la barre m√®re
   * @returns {string} - Contenu du BODY
   */
  generateBody: function(firstPiece, motherBarInfo) {
    const f4cData = firstPiece.f4cData || {};
    
    // Template par d√©faut pour le BODY
    const bodyTemplate = {
      B001: "        ",
      B002: "700",
      B003: "3",
      B004: "0",
      B005: "0",
      B006: "0",
      B007: "0",
      B008: "0",
      B009: "0",
      B010: "0",
      B011: "0",
      B012: "0",
      B013: "0",
      B021: "HEA     ", // Sera remplac√© par les donn√©es de la pi√®ce
      B022: "0",
      B023: "0",
      B024: "0",
      B025: "0",
      B041: "0",
      B026: "0",
      B027: "0",
      B030: "        ",
      B031: "                ",
      B032: "                ",
      B033: "        ",
      B034: "0",
      B035: "1000000", // Sera remplac√© par les donn√©es de la pi√®ce
      B037: "                ",
      B036: "0",
      B090: "                ",
      B100: "1"
    };
    
    // Appliquer les donn√©es F4C de la pi√®ce
    if (f4cData.B021) {
      bodyTemplate.B021 = f4cData.B021.padEnd(8, ' ');
    } else {
      // G√©n√©rer B021 √† partir du profil
      bodyTemplate.B021 = firstPiece.profile.substring(0, 3).padEnd(8, ' ');
    }
    
    if (f4cData.B035) {
      bodyTemplate.B035 = f4cData.B035;
    } else {
      // Valeur par d√©faut bas√©e sur le profil
      bodyTemplate.B035 = "10000";
    }
    
    // Construire la cha√Æne BODY
    const bodyParts = [];
    for (const [key, value] of Object.entries(bodyTemplate)) {
      bodyParts.push(`${key}="${value}"`);
    }
    
    return `<BODY ${bodyParts.join(' ')} ></BODY>`;
  },
  
  /**
   * MODIFI√â: Groupe les pi√®ces identiques pour optimiser les STEPs (adapt√© au nouveau format)
   * @param {Array} pieces - Liste des pi√®ces √† d√©couper
   * @returns {Array} - Groupes de pi√®ces identiques avec leur quantit√©
   */
  groupIdenticalSteps: function(pieces) {
    const groups = new Map();
    
    pieces.forEach(piece => {
      // Cr√©er une cl√© unique bas√©e sur les propri√©t√©s importantes
      const key = JSON.stringify({
        length: piece.length,
        angles: piece.angles,
        f4cData: {
          S051: piece.f4cData?.S051,
          S054: piece.f4cData?.S054,
          S055: piece.f4cData?.S055
        }
      });
      
      if (groups.has(key)) {
        groups.get(key).quantity++;
      } else {
        groups.set(key, {
          piece: piece,
          quantity: 1
        });
      }
    });
    
    return Array.from(groups.values());
  },
  
  /**
   * MODIFI√â: G√©n√®re un STEP pour une pi√®ce (adapt√© au nouveau format)
   * @param {Object} piece - Pi√®ce √† d√©couper
   * @param {number} quantity - Quantit√© de pi√®ces identiques
   * @returns {string} - Contenu du STEP
   */
  generateStep: function(piece, quantity) {
    const f4cData = piece.f4cData || {};
    
    // Template par d√©faut pour le STEP
    const stepTemplate = {
      S051: "15000000", // Longueur en microm√®tres - sera remplac√©
      S052: "1",        // Quantit√© - sera remplac√©
      S053: "1",        // Quantit√© - sera remplac√©
      S054: "9000",     // Angle d√©but en centi√®mes - sera remplac√©
      S055: "9000",     // Angle fin en centi√®mes - sera remplac√©
      S056: "1",
      S057: "1",
      S058: "1",
      S060: "0",
      S061: "0",
      S070: "0",
      S071: "0",
      S072: "0",
      S073: "0",
      S074: "0",
      S075: "0",
      S094: "0"
    };
    
    // Appliquer les donn√©es F4C de la pi√®ce
    if (f4cData.S051) {
      stepTemplate.S051 = f4cData.S051;
    } else {
      // Convertir la longueur en microm√®tres (cm ‚Üí ¬µm)
      stepTemplate.S051 = Math.round(piece.length * 10000).toString();
    }
    
    // Quantit√©s
    stepTemplate.S052 = quantity.toString();
    stepTemplate.S053 = quantity.toString();
    
    // Angles
    if (f4cData.S054) {
      stepTemplate.S054 = f4cData.S054;
    } else {
      // Convertir l'angle en centi√®mes de degr√©
      const angle1 = piece.angles?.[1] || 90;
      stepTemplate.S054 = Math.round(angle1 * 100).toString();
    }
    
    if (f4cData.S055) {
      stepTemplate.S055 = f4cData.S055;
    } else {
      // Convertir l'angle en centi√®mes de degr√©
      const angle2 = piece.angles?.[2] || 90;
      stepTemplate.S055 = Math.round(angle2 * 100).toString();
    }
    
    // Construire la cha√Æne STEP
    const stepParts = [];
    for (const [key, value] of Object.entries(stepTemplate)) {
      stepParts.push(`${key}="${value}"`);
    }
    
    return `<STEP ${stepParts.join(' ')} ></STEP>`;
  },
  
  /**
   * CORRIG√â: G√©n√®re le nom du fichier ZIP au format demand√©
   * @param {Array} pgmObjects - Liste des objets PGM
   * @returns {string} - Nom du fichier ZIP
   */
  generateZipFileName: function(pgmObjects) {
    // Date au format AAAA-MM-JJ_HH-mm
    const now = new Date();
    const dateStr = this.formatDateTimeForFileName(now);
    
    // Compter le nombre total de barres uniques
    const barNames = new Set();
    
    pgmObjects.forEach(pgm => {
      pgm.pieces.forEach(piece => {
        const pieceRef = piece.pieceReference;
        let barName = '';
        
        if (pieceRef.nom && pieceRef.nom.trim() !== '') {
          // Utiliser le nom de la barre
          barName = pieceRef.nom.trim();
        } else {
          // G√©n√©rer un nom unique √† partir du profil et de la longueur
          barName = `${pieceRef.profile}_${piece.length}cm`;
        }
        
        if (barName) {
          barNames.add(barName);
        }
      });
    });
    
    const nombreBarres = barNames.size;
    
    // MODIFI√â: Format final avec nombre de barres avant la date
    const fileName = `lot_PGM_${nombreBarres}_barres_${dateStr}.zip`;
    
    // Nettoyer le nom final (supprimer caract√®res interdits dans les noms de fichier)
    return fileName.replace(/[<>:"/\\|?*]/g, '_');
  },

  /**
   * MODIFI√â: G√©n√®re un ZIP avec tous les fichiers PGM √† partir des objets PGM
   * @param {Array} pgmObjects - Liste des objets PGM
   * @param {Object} dataManager - Instance du DataManager
   * @returns {Promise<{blob: Blob, fileName: string}>} - Blob et nom du fichier ZIP
   */
  generateAllPgmFromObjects: async function(pgmObjects, dataManager) {
    console.log(`üèóÔ∏è G√©n√©ration de ${pgmObjects.length} fichiers PGM...`);
    
    if (!pgmObjects || pgmObjects.length === 0) {
      throw new Error('Aucun objet PGM fourni');
    }
    
    const zip = new JSZip();
    const fileNames = new Set(); // Pour √©viter les doublons
    
    try {
      // G√©n√©rer chaque fichier PGM
      for (let i = 0; i < pgmObjects.length; i++) {
        const pgmObject = pgmObjects[i];
        
        try {
          // G√©n√©rer le contenu PGM
          const pgmContent = this.generatePgmFromObject(pgmObject, dataManager);
          
          // G√©n√©rer le nom de fichier
          let fileName = this.generatePgmFileName(pgmObject);
          
          // G√©rer les doublons en ajoutant un num√©ro
          let counter = 1;
          let uniqueFileName = fileName;
          while (fileNames.has(uniqueFileName)) {
            const nameParts = fileName.split('.pgm');
            uniqueFileName = `${nameParts[0]}_${counter}.pgm`;
            counter++;
          }
          
          fileNames.add(uniqueFileName);
          
          // Ajouter au ZIP
          zip.file(uniqueFileName, pgmContent);
          
          console.log(`  ‚úÖ ${uniqueFileName} (${pgmObject.pieces.length} pi√®ces)`);
          
        } catch (error) {
          console.error(`‚ùå Erreur g√©n√©ration PGM ${i + 1}:`, error);
          
          // Cr√©er un fichier d'erreur pour continuer le processus
          const errorFileName = `ERREUR_PGM_${i + 1}.txt`;
          const errorContent = `Erreur lors de la g√©n√©ration du PGM:\n${error.message}\n\nObjet PGM:\n${JSON.stringify(pgmObject, null, 2)}`;
          zip.file(errorFileName, errorContent);
        }
      }
      
      // Ajouter un fichier de r√©sum√©
      const summary = this.generateSummaryFile(pgmObjects);
      zip.file('RESUME_GENERATION.txt', summary);
      
      // G√©n√©rer le nom du fichier ZIP
      const zipFileName = this.generateZipFileName(pgmObjects);
      
      // G√©n√©rer le ZIP
      console.log('üì¶ Cr√©ation du fichier ZIP...');
      const blob = await zip.generateAsync({
        type: "blob",
        compression: "DEFLATE",
        compressionOptions: {
          level: 6
        }
      });
      
      console.log(`‚úÖ ZIP g√©n√©r√© avec succ√®s: ${zipFileName} (${fileNames.size} fichiers PGM)`);
      
      // Retourner le blob et le nom du fichier
      return {
        blob: blob,
        fileName: zipFileName
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du ZIP:', error);
      throw error;
    }
  },
  
  /**
   * MODIFI√â: G√©n√®re un fichier de r√©sum√© pour le ZIP avec virgules d√©cimales et format de date fran√ßais
   * @param {Array} pgmObjects - Liste des objets PGM
   * @returns {string} - Contenu du fichier de r√©sum√©
   */
  generateSummaryFile: function(pgmObjects) {
    const now = new Date();
    const dateStr = this.formatDate(now);
    const timeStr = now.toLocaleTimeString('fr-FR');
    
    let summary = `R√âSUM√â DE G√âN√âRATION PGM\n`;
    summary += `========================\n\n`;
    summary += `Date de g√©n√©ration: ${dateStr} √† ${timeStr}\n`;
    summary += `Nombre total de fichiers PGM: ${pgmObjects.length}\n\n`;
    
    // Statistiques par profil
    const profileStats = {};
    pgmObjects.forEach(pgm => {
      const profile = pgm.motherBar.profile;
      if (!profileStats[profile]) {
        profileStats[profile] = {
          count: 0,
          totalPieces: 0,
          totalLength: 0,
          totalWaste: 0
        };
      }
      
      profileStats[profile].count++;
      profileStats[profile].totalPieces += pgm.pieces.length;
      profileStats[profile].totalLength += pgm.motherBar.length;
      profileStats[profile].totalWaste += pgm.motherBar.waste;
    });
    
    summary += `STATISTIQUES PAR PROFIL:\n`;
    summary += `------------------------\n`;
    for (const [profile, stats] of Object.entries(profileStats)) {
      const efficiency = Math.round((1 - stats.totalWaste / stats.totalLength) * 100);
      // VIRGULE pour le contenu du fichier de r√©sum√©
      const totalLengthMeters = this.formatLengthInMeters(stats.totalLength, true); // true = utiliser la virgule
      const totalWasteCm = Math.round(stats.totalWaste);
      
      summary += `${profile}:\n`;
      summary += `  - ${stats.count} barres m√®res\n`;
      summary += `  - ${stats.totalPieces} pi√®ces √† d√©couper\n`;
      summary += `  - ${totalLengthMeters} m de barres\n`;
      summary += `  - ${totalWasteCm} cm de chutes\n`;
      summary += `  - Efficacit√©: ${efficiency}%\n\n`;
    }
    
    // D√âTAIL DES BARRES √Ä D√âCOUPER PAR PGM
    summary += `D√âTAIL DES BARRES √Ä D√âCOUPER:\n`;
    summary += `=============================\n\n`;
    
    pgmObjects.forEach((pgm, pgmIndex) => {
      const fileName = this.generatePgmFileName(pgm);
      
      // En-t√™te du PGM avec d√©limitation claire
      summary += `‚ïî${'‚ïê'.repeat(80)}\n`;
      summary += `‚ïë PGM ${pgmIndex + 1}: ${fileName}\n`;
      summary += `‚ïö${'‚ïê'.repeat(80)}\n\n`;
      
      // VIRGULE pour le contenu du fichier de r√©sum√©
      const motherBarLengthMeters = this.formatLengthInMeters(pgm.motherBar.length, true); // true = utiliser la virgule
      const wasteCm = Math.round(pgm.motherBar.waste);
      
      summary += `Profil: ${pgm.motherBar.profile}\n`;
      summary += `Orientation: ${pgm.motherBar.orientation}\n`;
      summary += `Longueur: ${motherBarLengthMeters} m\n`;
      summary += `Chute: ${wasteCm} cm\n`;
      summary += `Efficacit√©: ${pgm.metadata.efficiency}%\n\n`;
      
      // Liste des barres √† d√©couper
      summary += `Barres √† d√©couper:\n`;
      summary += `${'‚îÄ'.repeat(50)}\n`;
      
      if (pgm.pieces && pgm.pieces.length > 0) {
        pgm.pieces.forEach((piece, pieceIndex) => {
          const pieceRef = piece.pieceReference;
          const pieceName = pieceRef.nom && pieceRef.nom.trim() !== '' 
            ? pieceRef.nom 
            : `${pieceRef.profile}_${piece.length}cm`;
          
          // Angles si diff√©rents de 90¬∞
          const angle1 = pieceRef.angles?.[1] || 90;
          const angle2 = pieceRef.angles?.[2] || 90;
          const angleInfo = (angle1 !== 90 || angle2 !== 90) 
            ? ` - Angles: ${angle1}¬∞/${angle2}¬∞`
            : '';
          
          summary += `  ${(pieceIndex + 1).toString().padStart(2, ' ')}. ${pieceName} - ${piece.length} cm${angleInfo}\n`;
        });
      } else {
        summary += `  Aucune pi√®ce √† d√©couper\n`;
      }
      
      summary += `\n\n`;
    });
    
    return summary;
  }
};