import { DataManager } from './data-manager.js';
import { AlgorithmService } from './algorithm-service.js';
import { ImportManager } from './import-manager.js';
import { PgmGenerator } from './pgm-generator.js';
import { PgmManager } from './pgm-manager.js';
import { ResultsRenderer } from './results-renderer.js'; // Assure-toi que l'import existe

// Importer les gestionnaires UI
import { ImportHandler } from './ui/import-handler.js';
import { EditHandler } from './ui/edit-handler.js';
import { ResultsHandler } from './ui/results-handler.js';
import { NotificationService } from './ui/notification-service.js';
import { UIUtils } from './ui/utils.js';

/**
 * Contr√¥leur d'interface utilisateur principal (ADAPT√â SANS ID)
 */
export const UIController = {
  // Services et gestionnaires
  dataManager: null,
  algorithmService: null,
  importManager: null,
  pgmGenerator: null,
  pgmManager: null,
  
  // Gestionnaires UI
  importHandler: null,
  editHandler: null,
  resultsHandler: null,
  notificationService: null,
  
  // √âtat de l'application
  currentResults: null,
  currentPgmObjects: null,
  
  // NOUVEAU: Sauvegarde de l'√©tat original des donn√©es
  originalDataState: null,

  /**
   * NOUVEAU: Initialise le th√®me au chargement
   */
  initializeTheme: function() {
    const storedTheme = localStorage.getItem('theme');
    
    if (storedTheme) {
      this.applyTheme(storedTheme);
    }
    
    console.log('üé® Th√®me initialis√©');
  },

  /**
   * NOUVEAU: Applique un th√®me sp√©cifique
   */
  applyTheme: function(theme) {
    const html = document.documentElement;
    console.log(`üé® Application du th√®me: ${theme}`);
    
    // MODIFI√â: Utiliser des classes au lieu de color-scheme
    if (theme === 'dark') {
      html.classList.add('dark-theme');
      html.classList.remove('light-theme');
    } else {
      html.classList.add('light-theme');
      html.classList.remove('dark-theme');
    }
    
    console.log(`‚úÖ Th√®me ${theme} appliqu√©`);
  },

  /**
   * NOUVEAU: D√©tecte si le mode sombre est actif
   */
  isDarkMode: function() {
    // V√©rifier d'abord s'il y a une pr√©f√©rence stock√©e
    const storedTheme = localStorage.getItem('theme');
    if (storedTheme) {
      console.log(`üé® Th√®me stock√©: ${storedTheme}`);
      return storedTheme === 'dark';
    }
    
    // Sinon, utiliser la pr√©f√©rence syst√®me
    if (window.matchMedia) {
      const systemPreference = window.matchMedia('(prefers-color-scheme: dark)').matches;
      console.log(`üé® Pr√©f√©rence syst√®me: ${systemPreference ? 'dark' : 'light'}`);
      return systemPreference;
    }
    
    console.log('üé® Par d√©faut: light');
    return false;
  },

  /**
   * NOUVEAU: Bascule entre les th√®mes
   */
  toggleTheme: function() {
    const currentTheme = this.isDarkMode() ? 'light' : 'dark';
    console.log(`üé® Basculement vers: ${currentTheme}`);
    
    // Stocker la pr√©f√©rence
    localStorage.setItem('theme', currentTheme);
    console.log(`üíæ Th√®me sauvegard√©: ${currentTheme}`);
    
    // Appliquer le th√®me
    this.applyTheme(currentTheme);
    
    // Mettre √† jour le toggle
    this.updateThemeToggleState();
    
    console.log(`‚úÖ Th√®me bascul√© vers: ${currentTheme}`);
  },

  /**
   * NOUVEAU: Met √† jour l'√©tat visuel du toggle
   */
  updateThemeToggleState: function() {
    const themeToggle = document.getElementById('theme-toggle');
    if (!themeToggle) {
      console.warn('‚ö†Ô∏è Impossible de mettre √† jour le toggle (√©l√©ment non trouv√©)');
      return;
    }
    
    const isDarkMode = this.isDarkMode();
    console.log(`üé® Mise √† jour du toggle vers: ${isDarkMode ? 'dark' : 'light'}`);
    
    if (isDarkMode) {
      themeToggle.classList.add('dark');
    } else {
      themeToggle.classList.remove('dark');
    }
  },

  /**
   * NOUVEAU: Initialise l'√©tat du toggle de th√®me
   */
  initializeThemeToggle: function() {
    console.log('üé® Initialisation de l\'√©tat du toggle');
    this.updateThemeToggleState();
  },

  /**
   * NOUVEAU: Configure le toggle de th√®me
   */
  setupThemeToggle: function() {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      console.log('üé® Configuration du toggle de th√®me');
      
      // Initialiser l'√©tat du toggle selon le th√®me actuel
      this.initializeThemeToggle();
      
      // AJOUT√â: Debug pour v√©rifier que l'√©v√©nement est bien attach√©
      themeToggle.addEventListener('click', (event) => {
        console.log('üé® Toggle de th√®me cliqu√© !');
        event.preventDefault();
        event.stopPropagation();
        this.toggleTheme();
      });
      
      // √âcouter les changements de pr√©f√©rence syst√®me
      if (window.matchMedia) {
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        mediaQuery.addEventListener('change', () => {
          console.log('üé® Pr√©f√©rence syst√®me chang√©e');
          this.updateThemeToggleState();
        });
      }
      
      console.log('‚úÖ Toggle de th√®me configur√©');
    } else {
      console.warn('‚ö†Ô∏è √âl√©ment theme-toggle non trouv√©');
    }
  },

  /**
   * NOUVEAU: Configure le bouton "√âditer les donn√©es"
   */
  setupEditDataButton: function() {
    const editDataBtn = document.getElementById('edit-data-btn');
    if (editDataBtn) {
      editDataBtn.addEventListener('click', () => {
        console.log('üîÑ Retour √† l\'√©dition des donn√©es');
        this.showSection('data-section');
      });
    }
  },

  /**
   * Configure tous les gestionnaires d'√©v√©nements
   */
  setupEventListeners: function() {
    try {
      console.log('Configuration des gestionnaires d\'√©v√©nements...');
      
      // Configurer le bouton d'optimisation
      const setupOptimizeButton = () => {
        const optimizeBtn = document.getElementById('generate-cuts-btn');
        if (optimizeBtn) {
          optimizeBtn.addEventListener('click', () => {
            this.runOptimization();
          });
        }
      };
      
      // Configurer les boutons
      setupOptimizeButton();
      
      // Configuration du bouton "√âditer les Donn√©es"
      this.setupEditDataButton();
      
      // NOUVEAU: Configuration du toggle de th√®me
      this.setupThemeToggle();
      
      console.log('Gestionnaires d\'√©v√©nements configur√©s');
      
    } catch (error) {
      console.error('Erreur lors de la configuration des √©v√©nements:', error);
    }
  },

  /**
   * Initialise le contr√¥leur et tous les services
   */
  init: async function() {
    try {
      console.log('üöÄ Initialisation de l\'application...');
      
      // NOUVEAU: Initialiser le th√®me en premier
      this.initializeTheme();
      
      // Initialiser les services principaux
      this.initializeServices();
      
      // Initialiser les gestionnaires UI
      await this.initializeUIHandlers();
      
      // Configurer les gestionnaires d'√©v√©nements
      this.setupEventListeners();
      
      console.log('‚úÖ Application initialis√©e avec succ√®s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error);
      this.showNotification('Erreur lors de l\'initialisation de l\'application', 'error');
    }
  },
  
  /**
   * Initialise les services principaux
   */
  initializeServices: function() {
    // Initialiser le service de notification en premier
    this.notificationService = NotificationService;
    this.notificationService.init();
    
    // Initialiser les autres services
    this.dataManager = DataManager;
    this.algorithmService = AlgorithmService; // Plus besoin d'init car import direct
    this.importManager = ImportManager;
    this.pgmGenerator = PgmGenerator;
    this.pgmManager = PgmManager;
    
    console.log('üìã Services principaux initialis√©s');
  },
  
  /**
   * Initialise les gestionnaires d'interface utilisateur
   */
  initializeUIHandlers: async function() {
    try {
      // Initialiser les gestionnaires avec leurs d√©pendances
      this.importHandler = ImportHandler;
      this.importHandler.init({
        importManager: this.importManager,
        dataManager: this.dataManager,
        showNotification: (msg, type) => this.showNotification(msg, type),
        refreshDataDisplay: () => this.refreshDataDisplay()
      });
      
      this.editHandler = EditHandler;
      this.editHandler.init({
        dataManager: this.dataManager,
        showNotification: (msg, type) => this.showNotification(msg, type),
        refreshDataDisplay: () => this.refreshDataDisplay()
      });
      
      this.resultsHandler = ResultsHandler;
      this.resultsHandler.init({
        pgmGenerator: this.pgmGenerator,
        dataManager: this.dataManager,
        uiController: this,
        showNotification: (msg, type) => this.showNotification(msg, type)
      });
      
      // Rendre les sections d'√©dition apr√®s initialisation
      this.editHandler.renderSection();
      
      console.log('üé® Gestionnaires UI initialis√©s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation des gestionnaires UI:', error);
      throw error;
    }
  },

  /**
   * M√©thode pour afficher les notifications
   */
  showNotification: function(message, type = 'info') {
    if (this.notificationService && this.notificationService.show) {
      this.notificationService.show(message, type);
    } else {
      // Fallback en cas de probl√®me avec le service de notification
      console.log(`[${type.toUpperCase()}] ${message}`);
    }
  },

  /**
   * M√©thode pour rafra√Æchir l'affichage des donn√©es
   */
  refreshDataDisplay: function() {
    try {
      if (this.editHandler && this.editHandler.refreshTables) {
        this.editHandler.refreshTables();
      }
      
      // Mettre √† jour les compteurs s'ils existent
      this.updateDataCounters();
      
    } catch (error) {
      console.error('‚ùå Erreur lors du rafra√Æchissement de l\'affichage:', error);
    }
  },

  /**
   * Met √† jour les compteurs de donn√©es dans l'interface
   */
  updateDataCounters: function() {
    try {
      const data = this.dataManager.getData();
      
      // Compter les pi√®ces
      let totalPieces = 0;
      for (const profile in data.pieces) {
        for (const piece of data.pieces[profile]) {
          totalPieces += piece.quantity;
        }
      }
      
      // Compter les barres m√®res
      let totalMotherBars = 0;
      for (const profile in data.motherBars) {
        for (const bar of data.motherBars[profile]) {
          totalMotherBars += bar.quantity;
        }
      }
      
      // Mettre √† jour l'interface si les √©l√©ments existent
      const piecesCounter = document.getElementById('pieces-counter');
      const mothersCounter = document.getElementById('mothers-counter');
      
      if (piecesCounter) {
        piecesCounter.textContent = totalPieces;
      }
      
      if (mothersCounter) {
        mothersCounter.textContent = totalMotherBars;
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour des compteurs:', error);
    }
  },

  /**
   * M√©thode pour obtenir les objets PGM actuels
   */
  getCurrentPgmObjects: function() {
    return this.currentPgmObjects;
  },

  /**
   * Affiche une section sp√©cifique
   */
  showSection: function(sectionName) {
    // MODIFI√â: Restaurer les donn√©es originales quand on retourne √† l'√©dition
    if (sectionName === 'data-section') {
      this.restoreOriginalDataState();
      this.clearOptimizationResults();
      console.log('üîÑ Donn√©es originales restaur√©es lors du retour √† l\'√©dition');
    }
    
    // Cacher toutes les sections
    const sections = document.querySelectorAll('.content-section');
    sections.forEach(section => {
      section.classList.remove('active');
    });
    
    // Afficher la section demand√©e
    const targetSection = document.getElementById(sectionName);
    if (targetSection) {
      targetSection.classList.add('active');
    }
    
    // MODIFI√â: G√©rer l'affichage de la navigation avec le toggle
    const editDataBtn = document.getElementById('edit-data-btn');
    const themeToggleContainer = document.getElementById('theme-toggle-container');
    
    if (sectionName === 'result-section') {
      // Page r√©sultats : afficher le bouton "√âditer les Donn√©es", masquer le toggle
      if (editDataBtn) {
        editDataBtn.style.display = 'flex';
      }
      if (themeToggleContainer) {
        themeToggleContainer.style.display = 'none';
      }
    } else {
      // Page donn√©es : masquer le bouton "√âditer les Donn√©es", afficher le toggle
      if (editDataBtn) {
        editDataBtn.style.display = 'none';
      }
      if (themeToggleContainer) {
        themeToggleContainer.style.display = 'flex';
      }
      
      // MODIFI√â: V√©rifier et rafra√Æchir l'affichage des donn√©es
      if (sectionName === 'data-section') {
        this.verifyAndRefreshDataDisplay();
      }
    }
  },

  /**
   * Sauvegarde l'√©tat original des donn√©es avant optimisation (CORRIG√â)
   */
  saveOriginalDataState: function() {
    try {
      const currentData = this.dataManager.getData();
      
      // CORRIG√â: Plus de barsList, seulement pieces et motherBars
      this.originalDataState = {
        pieces: JSON.parse(JSON.stringify(currentData.pieces)),
        motherBars: JSON.parse(JSON.stringify(currentData.motherBars))
      };
      
      console.log('üíæ √âtat original des donn√©es sauvegard√©');
      
      // Log des donn√©es sauvegard√©es pour le d√©bogage
      let totalPieces = 0;
      for (const profile in this.originalDataState.pieces) {
        for (const piece of this.originalDataState.pieces[profile]) {
          totalPieces += piece.quantity;
        }
      }
      
      let totalMotherBars = 0;
      for (const profile in this.originalDataState.motherBars) {
        for (const bar of this.originalDataState.motherBars[profile]) {
          totalMotherBars += bar.quantity;
        }
      }
      
      console.log(`    üì¶ Sauvegard√©: ${totalPieces} pi√®ces, ${totalMotherBars} barres m√®res`);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de l\'√©tat original:', error);
    }
  },

  /**
   * Restaure l'√©tat original des donn√©es (CORRIG√â)
   */
  restoreOriginalDataState: function() {
    try {
      if (!this.originalDataState) {
        console.warn('‚ö†Ô∏è Aucun √©tat original √† restaurer');
        return;
      }
      
      // CORRIG√â: Restaurer seulement pieces et motherBars
      this.dataManager.data.pieces = JSON.parse(JSON.stringify(this.originalDataState.pieces));
      this.dataManager.data.motherBars = JSON.parse(JSON.stringify(this.originalDataState.motherBars));
      
      console.log('üîÑ √âtat original des donn√©es restaur√©');
      
      // Log des donn√©es restaur√©es pour le d√©bogage
      let totalPieces = 0;
      for (const profile in this.dataManager.data.pieces) {
        for (const piece of this.dataManager.data.pieces[profile]) {
          totalPieces += piece.quantity;
        }
      }
      
      let totalMotherBars = 0;
      for (const profile in this.dataManager.data.motherBars) {
        for (const bar of this.dataManager.data.motherBars[profile]) {
          totalMotherBars += bar.quantity;
        }
      }
      
      console.log(`    ‚úÖ Restaur√©: ${totalPieces} pi√®ces, ${totalMotherBars} barres m√®res`);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la restauration de l\'√©tat original:', error);
      // En cas d'erreur, essayer de r√©initialiser
      this.dataManager.initData();
    }
  },

  /**
   * Affiche les sch√©mas de coupe retenus dans la console
   */
  displayCuttingSchemesInConsole: function(results) {
    console.log('\nüéØ ===== SCH√âMAS DE COUPE RETENUS =====');
    
    const modelResults = results.modelResults || {};
    
    for (const [modelKey, modelResult] of Object.entries(modelResults)) {
      console.log(`\nüìã Mod√®le: ${modelKey}`);
      console.log('‚îÄ'.repeat(50));
      
      const layouts = modelResult.layouts || [];
      
      if (layouts.length === 0) {
        console.log('  Aucun sch√©ma de coupe');
        continue;
      }
      
      layouts.forEach((layout, index) => {
        const cuts = layout.cuts || layout.pieces || [];
        const count = layout.count || 1;
        const waste = layout.waste || layout.remainingLength || 0;
        const barLength = layout.originalLength || 0;
        
        // Grouper les coupes par longueur
        const cutCounts = {};
        cuts.forEach(cut => {
          cutCounts[cut] = (cutCounts[cut] || 0) + 1;
        });
        
        // Formater les coupes
        const cutsDisplay = Object.entries(cutCounts)
          .sort((a, b) => parseInt(b[0]) - parseInt(a[0])) // Trier par longueur d√©croissante
          .map(([length, count]) => `${count}√ó${length}cm`)
          .join(' + ');
        
        // Calculer l'efficacit√©
        const usedLength = cuts.reduce((sum, cut) => sum + cut, 0);
        const efficiency = barLength > 0 ? ((usedLength / barLength) * 100).toFixed(1) : 0;
        
        console.log(`  Sch√©ma #${index + 1}: ${count}√ó r√©p√©tition(s)`);
        console.log(`    ‚îî‚îÄ Barre ${barLength}cm: ${cutsDisplay}`);
        console.log(`    ‚îî‚îÄ Chute: ${waste}cm | Efficacit√©: ${efficiency}%`);
      });
      
      // Statistiques du mod√®le
      const totalBars = layouts.reduce((sum, layout) => sum + (layout.count || 1), 0);
      const totalWaste = layouts.reduce((sum, layout) => sum + ((layout.count || 1) * (layout.waste || 0)), 0);
      const totalLength = layouts.reduce((sum, layout) => sum + ((layout.count || 1) * (layout.originalLength || 0)), 0);
      const globalEfficiency = totalLength > 0 ? (((totalLength - totalWaste) / totalLength) * 100).toFixed(1) : 0;
      
      console.log(`\n  üìä R√©sum√© ${modelKey}:`);
      console.log(`    ‚Ä¢ ${totalBars} barres m√®res utilis√©es`);
      console.log(`    ‚Ä¢ ${totalWaste}cm de chutes au total`);
      console.log(`    ‚Ä¢ ${globalEfficiency}% d'efficacit√© globale`);
    }
    
    // Statistiques globales
    const globalStats = results.globalStats?.statistics || {};
    console.log(`\nüèÜ R√âSUM√â GLOBAL:`);
    console.log(`  ‚Ä¢ Total barres utilis√©es: ${results.globalStats?.totalBarsUsed || 0}`);
    console.log(`  ‚Ä¢ Efficacit√© globale: ${globalStats.utilizationRate || 0}%`);
    console.log(`  ‚Ä¢ Algorithme utilis√©: ${results.bestAlgorithm === 'ffd' ? 'First-Fit Decreasing' : 'Programmation Lin√©aire'}`);
    
    if (results.comparison) {
      console.log(`  ‚Ä¢ Comparaison: FFD ${results.comparison.ffdEfficiency}% vs ILP ${results.comparison.ilpEfficiency}%`);
    }
    
    console.log('üéØ =====================================\n');
  },

  /**
   * Affiche les statistiques d√©taill√©es des donn√©es pour le d√©bogage (CORRIG√â)
   */
  logDataStatistics: function(data) {
    console.log('üìä === STATISTIQUES DES DONN√âES ===');
    
    // Compter les pi√®ces
    let totalPieces = 0;
    let pieceProfiles = 0;
    let totalPieceTypes = 0;
    for (const profile in data.pieces) {
      pieceProfiles++;
      const profilePieces = data.pieces[profile];
      const profileTotal = profilePieces.reduce((sum, piece) => sum + piece.quantity, 0);
      totalPieces += profileTotal;
      totalPieceTypes += profilePieces.length;
      console.log(`  üîß ${profile}: ${profilePieces.length} types, ${profileTotal} pi√®ces`);
    }
    
    // Compter les barres m√®res
    let totalMotherBars = 0;
    let motherProfiles = 0;
    let totalMotherTypes = 0;
    for (const profile in data.motherBars) {
      motherProfiles++;
      const profileBars = data.motherBars[profile];
      const profileTotal = profileBars.reduce((sum, bar) => sum + bar.quantity, 0);
      totalMotherBars += profileTotal;
      totalMotherTypes += profileBars.length;
      console.log(`  üìè ${profile}: ${profileBars.length} longueurs, ${profileTotal} barres`);
    }
    
    console.log(`üìã Total: ${totalPieces} pi√®ces (${totalPieceTypes} types), ${totalMotherBars} barres m√®res (${totalMotherTypes} types)`);
    console.log(`üìÅ Profils: ${pieceProfiles} pour pi√®ces, ${motherProfiles} pour barres`);
    console.log('üìä =====================================');
  },

  /**
   * V√©rifie l'int√©grit√© des donn√©es (SIMPLIFI√â - Plus de barsList)
   */
  checkDataIntegrity: function() {
    const data = this.dataManager.getData();
    
    // CORRIG√â: V√©rifier seulement que les structures de base existent
    if (!data.pieces || !data.motherBars) {
      console.warn('‚ö†Ô∏è Structure de donn√©es corrompue, r√©initialisation...');
      this.dataManager.initData();
      return false;
    }
    
    // NOUVEAU: V√©rifications de coh√©rence interne
    for (const profile in data.pieces) {
      if (!Array.isArray(data.pieces[profile])) {
        console.warn(`‚ö†Ô∏è Structure pieces[${profile}] corrompue`);
        return false;
      }
      
      // V√©rifier chaque pi√®ce
      for (const piece of data.pieces[profile]) {
        if (!piece.profile || !piece.length || !piece.quantity) {
          console.warn(`‚ö†Ô∏è Pi√®ce invalide dans ${profile}:`, piece);
          return false;
        }
      }
    }
    
    for (const profile in data.motherBars) {
      if (!Array.isArray(data.motherBars[profile])) {
        console.warn(`‚ö†Ô∏è Structure motherBars[${profile}] corrompue`);
        return false;
      }
      
      // V√©rifier chaque barre m√®re
      for (const bar of data.motherBars[profile]) {
        if (!bar.profile || !bar.length || !bar.quantity) {
          console.warn(`‚ö†Ô∏è Barre m√®re invalide dans ${profile}:`, bar);
          return false;
        }
      }
    }
    
    console.log('‚úÖ Int√©grit√© des donn√©es v√©rifi√©e');
    return true;
  },

  /**
   * NOUVEAU: Compte le nombre total d'√©l√©ments dans les donn√©es
   */
  getTotalDataElements: function() {
    const data = this.dataManager.getData();
    let totalElements = 0;
    
    // Compter les types de pi√®ces
    for (const profile in data.pieces) {
      totalElements += data.pieces[profile].length;
    }
    
    // Compter les types de barres m√®res  
    for (const profile in data.motherBars) {
      totalElements += data.motherBars[profile].length;
    }
    
    return totalElements;
  },

  /**
   * V√©rifie l'int√©grit√© des donn√©es et rafra√Æchit l'affichage (AM√âLIOR√â)
   */
  verifyAndRefreshDataDisplay: function() {
    try {
      console.log('üîç V√©rification de l\'int√©grit√© des donn√©es...');
      
      // Obtenir les donn√©es actuelles
      const data = this.dataManager.getData();
      
      // Afficher les statistiques de d√©bogage
      this.logDataStatistics(data);
      
      // V√©rifier l'int√©grit√©
      if (!this.checkDataIntegrity()) {
        console.log('üîß Donn√©es corrig√©es automatiquement');
      } else {
        console.log(`‚úÖ ${this.getTotalDataElements()} √©l√©ments de donn√©es valid√©s`);
      }
      
      // Rafra√Æchir l'affichage
      this.refreshDataDisplay();
      
      console.log('üîÑ V√©rification et rafra√Æchissement termin√©s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification:', error);
      // En cas d'erreur critique, ne pas r√©initialiser les donn√©es
      this.showNotification('Erreur lors de la v√©rification des donn√©es', 'warning');
    }
  },

  /**
   * Lance l'optimisation avec √©tapes R√âELLES synchronis√©es
   */
  runOptimization: async function() {
    try {
      this.saveOriginalDataState();
      this.clearOptimizationResults();

      const data = this.dataManager.getData();
      console.log('üîç V√©rification des donn√©es avant optimisation...');
      this.logDataStatistics(data);

      if (!this.validateDataForOptimization(data)) {
        return;
      }

      UIUtils.showLoadingOverlay();
      const progress = document.querySelector('#loading-overlay .loading-progress');
      if (progress) progress.style.display = 'none';

      // === 1. CR√âATION DES MOD√àLES ===
      // Cr√©ation des mod√®les AVANT g√©n√©ration des √©tapes
      const models = this.algorithmService.createModelsFromDataManager();
      console.log(`üìã ${models.length} mod√®les cr√©√©s`);

      // === 2. G√âN√âRATION DES √âTAPES ===
      this.generateExecutionSteps(models);
      
      // === 3. √âTAPE TRANSFORM ===
      await this.activateStep('step-transform', 'Pr√©paration des mod√®les...');
      await new Promise(resolve => setTimeout(resolve, 500)); // Simulation du temps de pr√©paration
      await this.completeStep('step-transform', 'Mod√®les pr√™ts');

      // === 4. EX√âCUTION R√âELLE √âTAPE PAR √âTAPE ===
      const allResults = await this.runRealAlgorithmSteps(models);

      // === 5. COMPARAISON FINALE ===
      const finalResults = await this.runFinalComparison(allResults);
      this.currentResults = finalResults;

      // === 6. G√âN√âRATION DES PGM ===
      await this.runPgmGenerationStep();

      // === 7. AFFICHAGE DES R√âSULTATS ===
      await new Promise(resolve => setTimeout(resolve, 400));
      this.showResultsTabs();

    } catch (error) {
      console.error('Erreur lors de l\'optimisation:', error);
      this.showNotification(`Erreur: ${error.message}`, 'error');
      this.restoreOriginalDataState();
      this.clearOptimizationResults();
    } finally {
      UIUtils.hideLoadingOverlay();
      UIUtils.showLoadingProgressBar();
    }
  },

  /**
   * G√©n√®re les √©tapes d'ex√©cution bas√©es sur les mod√®les r√©els - VERSION SIMPLIFI√âE
   * Une √©tape par mod√®le (FFD + ILP en arri√®re-plan)
   */
  generateExecutionSteps: function(models) {
    const stepsContainer = document.querySelector('#loading-overlay .loading-steps');
    if (!stepsContainer) return;
    
    stepsContainer.innerHTML = '';
    let stepNum = 1;

    // √âtape 1 : Cr√©ation des mod√®les
    stepsContainer.appendChild(
      this.createStepDiv('step-transform', stepNum++, 'Pr√©paration des mod√®les')
    );

    // Une √©tape par mod√®le (FFD + ILP combin√©s)
    models.forEach((model, modelIndex) => {
      const modelLabel = model.label;
      
      stepsContainer.appendChild(
        this.createStepDiv(
          `step-model-${modelIndex}`, 
          stepNum++, 
          `Optimisation: ${modelLabel}`
        )
      );
    });

    // √âtapes finales
    stepsContainer.appendChild(
      this.createStepDiv('step-compare', stepNum++, 'Comparaison et s√©lection')
    );
    stepsContainer.appendChild(
      this.createStepDiv('step-pgm', stepNum++, 'G√©n√©ration des fichiers PGM')
    );
    
    console.log(`üéØ ${stepNum - 1} √©tapes g√©n√©r√©es pour ${models.length} mod√®les`);
  },

  /**
   * NOUVEAU: Active une √©tape (√©tat "en cours")
   */
  activateStep: async function(stepId, message) {
    const step = document.getElementById(stepId);
    if (step) {
      // Marquer comme actif
      step.classList.add('active');
      step.classList.remove('completed');
      
      // Petite pause pour l'effet visuel
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    console.log(`üü° √âtape ${stepId} activ√©e: ${message}`);
  },

  /**
   * AM√âLIOR√â: Compl√®te une √©tape avec animation
   */
  completeStep: async function(stepId, message) {
    const step = document.getElementById(stepId);
    if (step) {
      // Attendre un peu pour l'effet visuel de l'ex√©cution
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // Marquer comme compl√©t√©
      step.classList.remove('active');
      step.classList.add('completed');
      
      // Petite pause avant l'√©tape suivante
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    console.log(`‚úÖ √âtape ${stepId} termin√©e: ${message}`);
  },

  /**
   * SIMPLIFI√â: Ex√©cute les deux algorithmes pour chaque mod√®le dans une seule √©tape
   * Une √©tape visuelle = FFD + ILP pour un mod√®le
   */
  runRealAlgorithmSteps: async function(models) {
    console.log('üöÄ Ex√©cution r√©elle √©tape par √©tape (version simplifi√©e)');
    
    const allResults = {};
    
    // Initialiser la structure des r√©sultats
    models.forEach(model => {
      allResults[model.key] = {
        model: model,
        ffdResult: null,
        ilpResult: null
      };
    });

    // EX√âCUTION: Une √©tape par mod√®le (FFD + ILP combin√©s)
    for (let i = 0; i < models.length; i++) {
      const model = models[i];
      const stepId = `step-model-${i}`;
      
      console.log(`üéØ Optimisation compl√®te pour ${model.key} (${i + 1}/${models.length})`);
      
      // ACTIVER l'√©tape avant l'ex√©cution
      await this.activateStep(stepId, `Optimisation de ${model.label}...`);
      
      try {
        // EX√âCUTION FFD en arri√®re-plan
        console.log(`  üîÑ FFD pour ${model.key}`);
        const ffdResult = this.algorithmService.runAlgorithmOnSingleModel('ffd', model);
        allResults[model.key].ffdResult = ffdResult;
        
        await new Promise(resolve => setTimeout(resolve, 200));
        
        // EX√âCUTION ILP en arri√®re-plan
        console.log(`  üîÑ ILP pour ${model.key}`);
        const ilpResult = this.algorithmService.runAlgorithmOnSingleModel('ilp', model);
        allResults[model.key].ilpResult = ilpResult;
        
        // COMPL√âTER l'√©tape apr√®s les deux algorithmes
        await this.completeStep(stepId, `${model.label} optimis√©`);
        
      } catch (error) {
        console.error(`‚ùå Erreur optimisation pour ${model.key}:`, error);
        
        // Essayer au moins un algorithme si l'autre a √©chou√©
        if (!allResults[model.key].ffdResult && !allResults[model.key].ilpResult) {
          // Si les deux ont √©chou√©, essayer juste FFD
          try {
            console.log(`  üîÑ Tentative FFD seul pour ${model.key}`);
            const ffdResult = this.algorithmService.runAlgorithmOnSingleModel('ffd', model);
            allResults[model.key].ffdResult = ffdResult;
            await this.completeStep(stepId, `${model.label} optimis√© (FFD uniquement)`);
          } catch (ffdError) {
            console.error(`‚ùå Erreur FFD pour ${model.key}:`, ffdError);
            await this.completeStep(stepId, `${model.label} - √âchec optimisation`);
          }
        } else {
          await this.completeStep(stepId, `${model.label} partiellement optimis√©`);
        }
      }
    }
    
    return allResults;
  },

  /**
   * NOUVEAU: Effectue la comparaison finale et s√©lection des meilleurs r√©sultats
   */
  runFinalComparison: async function(allResults) {
    const stepCompareId = 'step-compare';
    
    // ACTIVER l'√©tape de comparaison
    await this.activateStep(stepCompareId, 'Comparaison des algorithmes et s√©lection...');
    
    console.log('üîÑ Comparaison finale des r√©sultats');
    
    const modelResults = {};
    
    // Comparer et s√©lectionner pour chaque mod√®le
    for (const [modelKey, results] of Object.entries(allResults)) {
      const { ffdResult, ilpResult } = results;
      
      if (ffdResult || ilpResult) {
        const bestResult = this.algorithmService.selectBestForModel(modelKey, ffdResult, ilpResult);
        modelResults[modelKey] = bestResult;
      }
    }
    
    // Construire les r√©sultats finaux
    const finalResults = this.algorithmService.buildFinalResults(modelResults);
    
    // COMPL√âTER l'√©tape de comparaison
    await this.completeStep(stepCompareId, 'Comparaison termin√©e');
    
    return finalResults;
  },

  /**
   * AM√âLIOR√â: Ex√©cute l'√©tape de g√©n√©ration PGM
   */
  runPgmGenerationStep: async function() {
    const stepPgmId = 'step-pgm';
    
    // ACTIVER l'√©tape PGM
    await this.activateStep(stepPgmId, 'G√©n√©ration des fichiers PGM...');
    
    try {
      // G√©n√©ration r√©elle des PGM
      this.currentPgmObjects = this.pgmManager.generatePgmObjects(this.currentResults);
      ResultsRenderer.renderResults(this.currentResults, this.algorithmService);
      this.resultsHandler.generatePgmPreviews();
      
      // COMPL√âTER l'√©tape PGM
      await this.completeStep(stepPgmId, 'Fichiers PGM g√©n√©r√©s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration PGM:', error);
      await this.completeStep(stepPgmId, 'Erreur g√©n√©ration PGM');
      this.showNotification('Erreur lors de la g√©n√©ration des aper√ßus PGM', 'warning');
    }
  },

  /**
   * Cr√©e un √©l√©ment div pour une √©tape
   */
  createStepDiv: function(id, icon, label) {
    const div = document.createElement('div');
    div.className = 'loading-step';
    div.id = id;
    div.innerHTML = `<div class="step-icon">${icon}</div><span>${label}</span>`;
    return div;
  },

  /**
   * Validation plus robuste avec d√©bogage d√©taill√©
   */
  validateDataForOptimization: function(data) {
    console.log('üîç === VALIDATION DES DONN√âES ===');
    
    if (!data) {
      console.error('‚ùå Aucune donn√©e disponible');
      this.showNotification('Aucune donn√©e disponible pour l\'optimisation', 'error');
      return false;
    }
    
    if (!data.pieces || !data.motherBars) {
      console.error('‚ùå Structure de donn√©es invalide');
      this.showNotification('Structure de donn√©es corrompue', 'error');
      return false;
    }
    
    // V√©rifier qu'il y a des pi√®ces
    let totalPieces = 0;
    let pieceDetails = [];
    for (const profile in data.pieces) {
      for (const piece of data.pieces[profile]) {
        totalPieces += piece.quantity;
        pieceDetails.push(`${profile}: ${piece.quantity}√ó${piece.length}cm`);
      }
    }
    
    console.log(`üì¶ Pi√®ces trouv√©es: ${totalPieces}`);
    if (pieceDetails.length > 0) {
      console.log('   D√©tail:', pieceDetails.slice(0, 5).join(', ') + (pieceDetails.length > 5 ? '...' : ''));
    }
    
    if (totalPieces === 0) {
      console.error('‚ùå Aucune pi√®ce √† d√©couper trouv√©e');
      this.showNotification('Aucune pi√®ce √† d√©couper. Veuillez d\'abord importer des barres.', 'error');
      return false;
    }
    
    // V√©rifier qu'il y a des barres m√®res
    let totalMotherBars = 0;
    let motherDetails = [];
    for (const profile in data.motherBars) {
      for (const bar of data.motherBars[profile]) {
        totalMotherBars += bar.quantity;
        motherDetails.push(`${profile}: ${bar.quantity}√ó${bar.length}cm`);
      }
    }
    
    console.log(`üìè Barres m√®res trouv√©es: ${totalMotherBars}`);
    if (motherDetails.length > 0) {
      console.log('   D√©tail:', motherDetails.slice(0, 5).join(', ') + (motherDetails.length > 5 ? '...' : ''));
    }
    
    if (totalMotherBars === 0) {
      console.error('‚ùå Aucune barre m√®re disponible');
      this.showNotification('Aucune barre m√®re disponible. Veuillez d\'abord ajouter des barres m√®res.', 'error');
      return false;
    }
    
    // V√©rifier la coh√©rence des profils
    const pieceProfiles = Object.keys(data.pieces);
    const motherBarProfiles = Object.keys(data.motherBars);
    
    console.log(`üîß Profils pi√®ces: ${pieceProfiles.join(', ')}`);
    console.log(`üìè Profils barres: ${motherBarProfiles.join(', ')}`);
    
    const missingProfiles = pieceProfiles.filter(profile => !motherBarProfiles.includes(profile));
    if (missingProfiles.length > 0) {
      console.error(`‚ùå Profils manquants: ${missingProfiles.join(', ')}`);
      this.showNotification(
        `Profils manquants dans les barres m√®res: ${missingProfiles.join(', ')}. 
         Veuillez ajouter des barres m√®res pour ces profils.`, 
        'error'
      );
      return false;
    }
    
    console.log('‚úÖ Validation des donn√©es r√©ussie');
    console.log('üîç ===============================');
    return true;
  },

  /**
   * M√âTHODE MANQUANTE: Efface les r√©sultats d'optimisation pr√©c√©dents
   */
  clearOptimizationResults: function() {
    try {
      console.log('üßπ Nettoyage des r√©sultats d\'optimisation pr√©c√©dents');
      
      // R√©initialiser les r√©sultats actuels
      this.currentResults = null;
      this.currentPgmObjects = null;
      
      // Nettoyer l'interface des r√©sultats
      const globalSummaryContainer = document.getElementById('global-summary-container');
      if (globalSummaryContainer) {
        globalSummaryContainer.innerHTML = '';
      }
      
      const modelDetailsContainer = document.getElementById('model-details-container');
      if (modelDetailsContainer) {
        modelDetailsContainer.innerHTML = '';
      }
      
      const pgmFilesContainer = document.getElementById('pgm-files-list');
      if (pgmFilesContainer) {
        pgmFilesContainer.innerHTML = '';
      }
      
      // Masquer la section r√©sultats et afficher la section donn√©es
      const resultSection = document.getElementById('result-section');
      const dataSection = document.getElementById('data-section');
      
      if (resultSection) {
        resultSection.classList.remove('active');
      }
      
      if (dataSection) {
        dataSection.classList.add('active');
      }
      
      // Masquer la navigation r√©sultats
      const resultsNav = document.getElementById('results-nav');
      if (resultsNav) {
        resultsNav.style.display = 'none';
      }
      
      console.log('‚úÖ R√©sultats d\'optimisation nettoy√©s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors du nettoyage des r√©sultats:', error);
    }
  },

  /**
   * M√âTHODE MANQUANTE: Affiche les onglets de r√©sultats
   */
  showResultsTabs: function() {
    try {
      console.log('üìä Affichage des onglets de r√©sultats');
      
      // V√©rifier que nous avons des r√©sultats √† afficher
      if (!this.currentResults) {
        console.warn('‚ö†Ô∏è Aucun r√©sultat √† afficher');
        return;
      }
      
      // Basculer vers la section r√©sultats
      this.showSection('result-section');
      
      // Afficher la navigation r√©sultats
      const resultsNav = document.getElementById('results-nav');
      if (resultsNav) {
        resultsNav.style.display = 'flex';
      }
      
      console.log('‚úÖ Onglets de r√©sultats affich√©s');
      
      // MODIFI√â: Scroll imm√©diat vers le haut sans animation, puis pas de scroll vers les d√©tails
      setTimeout(() => {
        // Scroll instantan√© vers le haut de la page (sans animation)
        window.scrollTo({ top: 0, behavior: 'instant' });
        console.log('üîù Page positionn√©e en haut');
        
        // SUPPRIM√â: Le scroll vers les d√©tails des mod√®les
        // La page reste simplement en haut, l'utilisateur peut d√©filer manuellement
        
      }, 100); // Court d√©lai pour laisser le rendu se faire
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'affichage des r√©sultats:', error);
      this.showNotification('Erreur lors de l\'affichage des r√©sultats', 'error');
    }
  }
};