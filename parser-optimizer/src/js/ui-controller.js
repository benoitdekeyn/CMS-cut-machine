import { DataManager } from './data-manager.js';
import { AlgorithmService } from './algorithm-service.js';
import { ImportManager } from './import-manager.js';
import { PgmGenerator } from './pgm-generator.js';
import { PgmManager } from './pgm-manager.js';
import { ResultsRenderer } from './results-renderer.js'; // Assure-toi que l'import existe

// Importer les gestionnaires UI
import { ImportHandler } from './ui/import-handler.js';
import { EditHandler } from './ui/edit-handler.js';
import { ResultsHandler } from './ui/results-handler.js';
import { NotificationService } from './ui/notification-service.js';
import { UIUtils } from './ui/utils.js';

/**
 * Contr√¥leur d'interface utilisateur principal
 * Coordonne les diff√©rentes sections et services
 */
export const UIController = {
  // Services et gestionnaires
  dataManager: null,
  algorithmService: null,
  importManager: null,
  pgmGenerator: null,
  pgmManager: null,
  
  // Gestionnaires UI
  importHandler: null,
  editHandler: null,
  resultsHandler: null,
  notificationService: null,
  
  // √âtat de l'application
  currentResults: null,
  currentPgmObjects: null,
  
  // NOUVEAU: Sauvegarde de l'√©tat original des donn√©es
  originalDataState: null,

  /**
   * Initialise le contr√¥leur et tous les services
   */
  init: async function() {
    try {
      console.log('üöÄ Initialisation de l\'application...');
      
      // Initialiser les services principaux
      this.initializeServices();
      
      // Initialiser les gestionnaires UI
      await this.initializeUIHandlers();
      
      // Configurer les gestionnaires d'√©v√©nements
      this.setupEventListeners();
      
      console.log('‚úÖ Application initialis√©e avec succ√®s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error);
      this.showNotification('Erreur lors de l\'initialisation de l\'application', 'error');
    }
  },
  
  /**
   * Initialise les services principaux
   */
  initializeServices: function() {
    // Initialiser le service de notification en premier
    this.notificationService = NotificationService;
    this.notificationService.init();
    
    // Initialiser les autres services
    this.dataManager = DataManager;
    this.algorithmService = AlgorithmService; // Plus besoin d'init car import direct
    this.importManager = ImportManager;
    this.pgmGenerator = PgmGenerator;
    this.pgmManager = PgmManager;
    
    console.log('üìã Services principaux initialis√©s');
  },
  
  /**
   * Initialise les gestionnaires d'interface utilisateur
   */
  initializeUIHandlers: async function() {
    try {
      // Initialiser les gestionnaires avec leurs d√©pendances
      this.importHandler = ImportHandler;
      this.importHandler.init({
        importManager: this.importManager,
        dataManager: this.dataManager,
        showNotification: (msg, type) => this.showNotification(msg, type),
        refreshDataDisplay: () => this.refreshDataDisplay()
      });
      
      this.editHandler = EditHandler;
      this.editHandler.init({
        dataManager: this.dataManager,
        showNotification: (msg, type) => this.showNotification(msg, type),
        refreshDataDisplay: () => this.refreshDataDisplay()
      });
      
      this.resultsHandler = ResultsHandler;
      this.resultsHandler.init({
        pgmGenerator: this.pgmGenerator,
        dataManager: this.dataManager,
        uiController: this,
        showNotification: (msg, type) => this.showNotification(msg, type)
      });
      
      // Rendre les sections d'√©dition apr√®s initialisation
      this.editHandler.renderSection();
      
      console.log('üé® Gestionnaires UI initialis√©s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation des gestionnaires UI:', error);
      throw error;
    }
  },

  /**
   * M√©thode pour afficher les notifications
   */
  showNotification: function(message, type = 'info') {
    if (this.notificationService && this.notificationService.show) {
      this.notificationService.show(message, type);
    } else {
      // Fallback en cas de probl√®me avec le service de notification
      console.log(`[${type.toUpperCase()}] ${message}`);
    }
  },

  /**
   * M√©thode pour rafra√Æchir l'affichage des donn√©es
   */
  refreshDataDisplay: function() {
    try {
      if (this.editHandler && this.editHandler.refreshTables) {
        this.editHandler.refreshTables();
      }
      
      // Mettre √† jour les compteurs s'ils existent
      this.updateDataCounters();
      
    } catch (error) {
      console.error('‚ùå Erreur lors du rafra√Æchissement de l\'affichage:', error);
    }
  },

  /**
   * Met √† jour les compteurs de donn√©es dans l'interface
   */
  updateDataCounters: function() {
    try {
      const data = this.dataManager.getData();
      
      // Compter les pi√®ces
      let totalPieces = 0;
      for (const profile in data.pieces) {
        for (const piece of data.pieces[profile]) {
          totalPieces += piece.quantity;
        }
      }
      
      // Compter les barres m√®res
      let totalMotherBars = 0;
      for (const profile in data.motherBars) {
        for (const bar of data.motherBars[profile]) {
          totalMotherBars += bar.quantity;
        }
      }
      
      // Mettre √† jour l'interface si les √©l√©ments existent
      const piecesCounter = document.getElementById('pieces-counter');
      const mothersCounter = document.getElementById('mothers-counter');
      
      if (piecesCounter) {
        piecesCounter.textContent = totalPieces;
      }
      
      if (mothersCounter) {
        mothersCounter.textContent = totalMotherBars;
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour des compteurs:', error);
    }
  },

  /**
   * M√©thode pour obtenir les objets PGM actuels
   */
  getCurrentPgmObjects: function() {
    return this.currentPgmObjects;
  },

  /**
   * Configure tous les gestionnaires d'√©v√©nements
   */
  setupEventListeners: function() {
    try {
      console.log('Configuration des gestionnaires d\'√©v√©nements...');
      
      // Configurer le bouton d'optimisation
      const setupOptimizeButton = () => {
        const optimizeBtn = document.getElementById('generate-cuts-btn');
        if (optimizeBtn) {
          optimizeBtn.addEventListener('click', () => {
            this.runOptimization();
          });
        }
      };
      
      // Configurer les boutons
      setupOptimizeButton();
      
      // Configuration du bouton "√âditer les Donn√©es"
      this.setupEditDataButton();
      
      console.log('Gestionnaires d\'√©v√©nements configur√©s');
      
    } catch (error) {
      console.error('Erreur lors de la configuration des √©v√©nements:', error);
    }
  },
  
  /**
   * Configure le bouton "√âditer les Donn√©es"
   */
  setupEditDataButton: function() {
    const editDataBtn = document.querySelector('.btn-edit-data');
    if (editDataBtn) {
      editDataBtn.addEventListener('click', () => {
        this.showSection('data-section');
      });
    }
  },
  
  /**
   * Affiche une section sp√©cifique
   */
  showSection: function(sectionName) {
    // MODIFI√â: Restaurer les donn√©es originales quand on retourne √† l'√©dition
    if (sectionName === 'data-section') {
      this.restoreOriginalDataState();
      this.clearOptimizationResults();
      console.log('üîÑ Donn√©es originales restaur√©es lors du retour √† l\'√©dition');
    }
    
    // Cacher toutes les sections
    const sections = document.querySelectorAll('.content-section');
    sections.forEach(section => {
      section.classList.remove('active');
    });
    
    // Afficher la section demand√©e
    const targetSection = document.getElementById(sectionName);
    if (targetSection) {
      targetSection.classList.add('active');
    }
    
    // G√©rer l'affichage de la navigation
    const resultsNav = document.getElementById('results-nav');
    if (sectionName === 'result-section') {
      // Afficher le bouton "√âditer les Donn√©es" sur la page r√©sultats
      if (resultsNav) {
        resultsNav.style.display = 'flex';
      }
    } else {
      // Cacher la navigation sur la page donn√©es
      if (resultsNav) {
        resultsNav.style.display = 'none';
      }
      
      // MODIFI√â: V√©rifier et rafra√Æchir l'affichage des donn√©es
      if (sectionName === 'data-section') {
        this.verifyAndRefreshDataDisplay();
      }
    }
  },

  /**
   * Sauvegarde l'√©tat original des donn√©es avant optimisation
   */
  saveOriginalDataState: function() {
    try {
      const currentData = this.dataManager.getData();
      
      // Faire une copie profonde des donn√©es pour √©viter les r√©f√©rences partag√©es
      this.originalDataState = {
        pieces: JSON.parse(JSON.stringify(currentData.pieces)),
        motherBars: JSON.parse(JSON.stringify(currentData.motherBars)),
        barsList: JSON.parse(JSON.stringify(currentData.barsList))
      };
      
      console.log('üíæ √âtat original des donn√©es sauvegard√©');
      
      // Log des donn√©es sauvegard√©es pour le d√©bogage
      let totalPieces = 0;
      for (const profile in this.originalDataState.pieces) {
        for (const piece of this.originalDataState.pieces[profile]) {
          totalPieces += piece.quantity;
        }
      }
      
      let totalMotherBars = 0;
      for (const profile in this.originalDataState.motherBars) {
        for (const bar of this.originalDataState.motherBars[profile]) {
          totalMotherBars += bar.quantity;
        }
      }
      
      console.log(`    üì¶ Sauvegard√©: ${totalPieces} pi√®ces, ${totalMotherBars} barres m√®res`);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de l\'√©tat original:', error);
    }
  },

  /**
   * Restaure l'√©tat original des donn√©es
   */
  restoreOriginalDataState: function() {
    try {
      if (!this.originalDataState) {
        console.warn('‚ö†Ô∏è Aucun √©tat original √† restaurer');
        return;
      }
      
      // Restaurer les donn√©es depuis la sauvegarde
      this.dataManager.data.pieces = JSON.parse(JSON.stringify(this.originalDataState.pieces));
      this.dataManager.data.motherBars = JSON.parse(JSON.stringify(this.originalDataState.motherBars));
      this.dataManager.data.barsList = JSON.parse(JSON.stringify(this.originalDataState.barsList));
      
      console.log('üîÑ √âtat original des donn√©es restaur√©');
      
      // Log des donn√©es restaur√©es pour le d√©bogage
      let totalPieces = 0;
      for (const profile in this.dataManager.data.pieces) {
        for (const piece of this.dataManager.data.pieces[profile]) {
          totalPieces += piece.quantity;
        }
      }
      
      let totalMotherBars = 0;
      for (const profile in this.dataManager.data.motherBars) {
        for (const bar of this.dataManager.data.motherBars[profile]) {
          totalMotherBars += bar.quantity;
        }
      }
      
      console.log(`    ‚úÖ Restaur√©: ${totalPieces} pi√®ces, ${totalMotherBars} barres m√®res`);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la restauration de l\'√©tat original:', error);
      // En cas d'erreur, essayer de r√©initialiser
      this.dataManager.initData();
    }
  },

  /**
   * Nettoie uniquement les r√©sultats d'optimisation, pas les donn√©es de base
   */
  clearOptimizationResults: function() {
    try {
      // Vider les r√©sultats d'optimisation
      this.currentResults = null;
      this.currentPgmObjects = null;
      
      // Nettoyer le contenu des sections r√©sultats
      const resultsContainer = document.getElementById('results-container');
      if (resultsContainer) {
        resultsContainer.innerHTML = '';
      }
      
      const pgmContainer = document.getElementById('pgm-files-list');
      if (pgmContainer) {
        pgmContainer.innerHTML = '';
      }
      
      // R√©initialiser les √©tapes de chargement si n√©cessaire
      UIUtils.resetLoadingSteps();
      
      console.log('‚úÖ R√©sultats d\'optimisation nettoy√©s avec succ√®s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors du nettoyage des r√©sultats:', error);
    }
  },

  /**
   * Affiche les sch√©mas de coupe retenus dans la console
   */
  displayCuttingSchemesInConsole: function(results) {
    console.log('\nüéØ ===== SCH√âMAS DE COUPE RETENUS =====');
    
    const modelResults = results.modelResults || {};
    
    for (const [modelKey, modelResult] of Object.entries(modelResults)) {
      console.log(`\nüìã Mod√®le: ${modelKey}`);
      console.log('‚îÄ'.repeat(50));
      
      const layouts = modelResult.layouts || [];
      
      if (layouts.length === 0) {
        console.log('  Aucun sch√©ma de coupe');
        continue;
      }
      
      layouts.forEach((layout, index) => {
        const cuts = layout.cuts || layout.pieces || [];
        const count = layout.count || 1;
        const waste = layout.waste || layout.remainingLength || 0;
        const barLength = layout.originalLength || 0;
        
        // Grouper les coupes par longueur
        const cutCounts = {};
        cuts.forEach(cut => {
          cutCounts[cut] = (cutCounts[cut] || 0) + 1;
        });
        
        // Formater les coupes
        const cutsDisplay = Object.entries(cutCounts)
          .sort((a, b) => parseInt(b[0]) - parseInt(a[0])) // Trier par longueur d√©croissante
          .map(([length, count]) => `${count}√ó${length}cm`)
          .join(' + ');
        
        // Calculer l'efficacit√©
        const usedLength = cuts.reduce((sum, cut) => sum + cut, 0);
        const efficiency = barLength > 0 ? ((usedLength / barLength) * 100).toFixed(1) : 0;
        
        console.log(`  Sch√©ma #${index + 1}: ${count}√ó r√©p√©tition(s)`);
        console.log(`    ‚îî‚îÄ Barre ${barLength}cm: ${cutsDisplay}`);
        console.log(`    ‚îî‚îÄ Chute: ${waste}cm | Efficacit√©: ${efficiency}%`);
      });
      
      // Statistiques du mod√®le
      const totalBars = layouts.reduce((sum, layout) => sum + (layout.count || 1), 0);
      const totalWaste = layouts.reduce((sum, layout) => sum + ((layout.count || 1) * (layout.waste || 0)), 0);
      const totalLength = layouts.reduce((sum, layout) => sum + ((layout.count || 1) * (layout.originalLength || 0)), 0);
      const globalEfficiency = totalLength > 0 ? (((totalLength - totalWaste) / totalLength) * 100).toFixed(1) : 0;
      
      console.log(`\n  üìä R√©sum√© ${modelKey}:`);
      console.log(`    ‚Ä¢ ${totalBars} barres m√®res utilis√©es`);
      console.log(`    ‚Ä¢ ${totalWaste}cm de chutes au total`);
      console.log(`    ‚Ä¢ ${globalEfficiency}% d'efficacit√© globale`);
    }
    
    // Statistiques globales
    const globalStats = results.globalStats?.statistics || {};
    console.log(`\nüèÜ R√âSUM√â GLOBAL:`);
    console.log(`  ‚Ä¢ Total barres utilis√©es: ${results.globalStats?.totalBarsUsed || 0}`);
    console.log(`  ‚Ä¢ Efficacit√© globale: ${globalStats.utilizationRate || 0}%`);
    console.log(`  ‚Ä¢ Algorithme utilis√©: ${results.bestAlgorithm === 'ffd' ? 'First-Fit Decreasing' : 'Programmation Lin√©aire'}`);
    
    if (results.comparison) {
      console.log(`  ‚Ä¢ Comparaison: FFD ${results.comparison.ffdEfficiency}% vs ILP ${results.comparison.ilpEfficiency}%`);
    }
    
    console.log('üéØ =====================================\n');
  },

  /**
   * Affiche les statistiques d√©taill√©es des donn√©es pour le d√©bogage
   */
  logDataStatistics: function(data) {
    console.log('üìä === STATISTIQUES DES DONN√âES ===');
    
    // Compter les pi√®ces
    let totalPieces = 0;
    let pieceProfiles = 0;
    for (const profile in data.pieces) {
      pieceProfiles++;
      const profilePieces = data.pieces[profile];
      const profileTotal = profilePieces.reduce((sum, piece) => sum + piece.quantity, 0);
      totalPieces += profileTotal;
      console.log(`  üîß ${profile}: ${profilePieces.length} types, ${profileTotal} pi√®ces`);
    }
    
    // Compter les barres m√®res
    let totalMotherBars = 0;
    let motherProfiles = 0;
    for (const profile in data.motherBars) {
      motherProfiles++;
      const profileBars = data.motherBars[profile];
      const profileTotal = profileBars.reduce((sum, bar) => sum + bar.quantity, 0);
      totalMotherBars += profileTotal;
      console.log(`  üìè ${profile}: ${profileBars.length} longueurs, ${profileTotal} barres`);
    }
    
    console.log(`üìã Total: ${totalPieces} pi√®ces, ${totalMotherBars} barres m√®res`);
    console.log(`üìÅ Profils: ${pieceProfiles} pour pi√®ces, ${motherProfiles} pour barres`);
    console.log(`üìÑ Liste globale: ${data.barsList.length} √©l√©ments`);
    console.log('üìä =====================================');
  },

  /**
   * V√©rifie l'int√©grit√© des donn√©es et rafra√Æchit l'affichage
   */
  verifyAndRefreshDataDisplay: function() {
    try {
      console.log('üîç V√©rification de l\'int√©grit√© des donn√©es...');
      
      // Obtenir les donn√©es actuelles
      const data = this.dataManager.getData();
      
      // Afficher les statistiques de d√©bogage
      this.logDataStatistics(data);
      
      // V√©rifier l'int√©grit√©
      if (!this.checkDataIntegrity()) {
        console.log('üîß Donn√©es corrig√©es automatiquement');
      }
      
      // Rafra√Æchir l'affichage
      this.refreshDataDisplay();
      
      console.log('üîÑ V√©rification et rafra√Æchissement termin√©s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification:', error);
      // En cas d'erreur critique, ne pas r√©initialiser les donn√©es
      this.showNotification('Erreur lors de la v√©rification des donn√©es', 'warning');
    }
  },

  /**
   * V√©rifie l'int√©grit√© des donn√©es
   */
  checkDataIntegrity: function() {
    const data = this.dataManager.getData();
    
    // V√©rifier que les structures de base existent
    if (!data.pieces || !data.motherBars || !data.barsList) {
      console.warn('‚ö†Ô∏è Structure de donn√©es corrompue, r√©initialisation...');
      this.dataManager.initData();
      return false;
    }
    
    // V√©rifier la coh√©rence entre barsList et les structures group√©es
    let totalPiecesInGroups = 0;
    let totalMothersInGroups = 0;
    
    for (const profile in data.pieces) {
      totalPiecesInGroups += data.pieces[profile].length;
    }
    
    for (const profile in data.motherBars) {
      totalMothersInGroups += data.motherBars[profile].length;
    }
    
    const piecesInList = data.barsList.filter(b => b.type === 'fille').length;
    const mothersInList = data.barsList.filter(b => b.type === 'mother' || b.type === 'mere').length;
    
    if (totalPiecesInGroups !== piecesInList || totalMothersInGroups !== mothersInList) {
      console.warn('‚ö†Ô∏è Incoh√©rence d√©tect√©e dans les donn√©es, correction automatique...');
      // Ici on pourrait ajouter une logique de correction automatique
      return false;
    }
    
    return true;
  },

  /**
   * Lance l'optimisation avec √©tapes R√âELLES synchronis√©es
   */
  runOptimization: async function() {
    try {
      this.saveOriginalDataState();
      this.clearOptimizationResults();

      const data = this.dataManager.getData();
      console.log('üîç V√©rification des donn√©es avant optimisation...');
      this.logDataStatistics(data);

      if (!this.validateDataForOptimization(data)) {
        return;
      }

      UIUtils.showLoadingOverlay();
      const progress = document.querySelector('#loading-overlay .loading-progress');
      if (progress) progress.style.display = 'none';

      // === 1. CR√âATION DES MOD√àLES ===
      // Cr√©ation des mod√®les AVANT g√©n√©ration des √©tapes
      const models = this.algorithmService.createModelsFromDataManager();
      console.log(`üìã ${models.length} mod√®les cr√©√©s`);

      // === 2. G√âN√âRATION DES √âTAPES ===
      this.generateExecutionSteps(models);
      
      // === 3. √âTAPE TRANSFORM ===
      await this.activateStep('step-transform', 'Pr√©paration des mod√®les...');
      await new Promise(resolve => setTimeout(resolve, 500)); // Simulation du temps de pr√©paration
      await this.completeStep('step-transform', 'Mod√®les pr√™ts');

      // === 4. EX√âCUTION R√âELLE √âTAPE PAR √âTAPE ===
      const allResults = await this.runRealAlgorithmSteps(models);

      // === 5. COMPARAISON FINALE ===
      const finalResults = await this.runFinalComparison(allResults);
      this.currentResults = finalResults;

      // === 6. G√âN√âRATION DES PGM ===
      await this.runPgmGenerationStep();

      // === 7. AFFICHAGE DES R√âSULTATS ===
      await new Promise(resolve => setTimeout(resolve, 400));
      this.showResultsTabs();

    } catch (error) {
      console.error('Erreur lors de l\'optimisation:', error);
      this.showNotification(`Erreur: ${error.message}`, 'error');
      this.restoreOriginalDataState();
      this.clearOptimizationResults();
    } finally {
      UIUtils.hideLoadingOverlay();
      UIUtils.showLoadingProgressBar();
    }
  },

  /**
   * G√©n√®re les √©tapes d'ex√©cution bas√©es sur les mod√®les r√©els
   */
  generateExecutionSteps: function(models) {
    const stepsContainer = document.querySelector('#loading-overlay .loading-steps');
    if (!stepsContainer) return;
    
    stepsContainer.innerHTML = '';
    let stepNum = 1;

    // √âtape 1 : Cr√©ation des mod√®les
    stepsContainer.appendChild(
      this.createStepDiv('step-transform', stepNum++, 'Cr√©ation des mod√®les')
    );

    // √âtapes pour chaque mod√®le √ó chaque algorithme
    models.forEach((model, modelIndex) => {
      const modelLabel = model.label;
      
      // FFD pour ce mod√®le
      stepsContainer.appendChild(
        this.createStepDiv(
          `step-ffd-${modelIndex}`, 
          stepNum++, 
          `FFD: ${modelLabel}`
        )
      );
      
      // ILP pour ce mod√®le
      stepsContainer.appendChild(
        this.createStepDiv(
          `step-ilp-${modelIndex}`, 
          stepNum++, 
          `ILP: ${modelLabel}`
        )
      );
    });

    // √âtapes finales
    stepsContainer.appendChild(
      this.createStepDiv('step-compare', stepNum++, 'Comparaison et s√©lection')
    );
    stepsContainer.appendChild(
      this.createStepDiv('step-pgm', stepNum++, 'G√©n√©ration des fichiers PGM')
    );
    
    console.log(`üéØ ${stepNum - 1} √©tapes g√©n√©r√©es pour ${models.length} mod√®les`);
  },

  /**
   * NOUVEAU: Ex√©cute r√©ellement chaque algorithme sur chaque mod√®le
   * Une √©tape visuelle = Un appel d'algorithme r√©el
   * ORDRE CORRIG√â: FFD puis ILP pour chaque mod√®le successivement
   */
  runRealAlgorithmSteps: async function(models) {
    console.log('üöÄ Ex√©cution r√©elle √©tape par √©tape');
    
    const allResults = {};
    
    // Initialiser la structure des r√©sultats
    models.forEach(model => {
      allResults[model.key] = {
        model: model,
        ffdResult: null,
        ilpResult: null
      };
    });

    // EX√âCUTION DANS L'ORDRE DES √âTAPES AFFICH√âES
    // Pour chaque mod√®le: FFD puis ILP imm√©diatement apr√®s
    for (let i = 0; i < models.length; i++) {
      const model = models[i];
      
      // === √âTAPE FFD pour ce mod√®le ===
      const stepFFDId = `step-ffd-${i}`;
      console.log(`üîÑ FFD R√âEL pour ${model.key} (${i + 1}/${models.length})`);
      
      // ACTIVER l'√©tape avant l'ex√©cution
      await this.activateStep(stepFFDId, `Ex√©cution FFD pour ${model.label}...`);
      
      try {
        // EX√âCUTION R√âELLE de l'algorithme FFD
        const ffdResult = this.algorithmService.runAlgorithmOnSingleModel('ffd', model);
        allResults[model.key].ffdResult = ffdResult;
        
        // COMPL√âTER l'√©tape apr√®s succ√®s
        await this.completeStep(stepFFDId, `FFD termin√© pour ${model.label}`);
        
      } catch (error) {
        console.error(`‚ùå Erreur FFD pour ${model.key}:`, error);
        allResults[model.key].ffdResult = null;
        await this.completeStep(stepFFDId, `FFD √©chou√© pour ${model.label}`);
      }

      // === √âTAPE ILP pour ce mod√®le (imm√©diatement apr√®s FFD) ===
      const stepILPId = `step-ilp-${i}`;
      console.log(`üîÑ ILP R√âEL pour ${model.key} (${i + 1}/${models.length})`);
      
      // ACTIVER l'√©tape avant l'ex√©cution
      await this.activateStep(stepILPId, `Ex√©cution ILP pour ${model.label}...`);
      
      try {
        // EX√âCUTION R√âELLE de l'algorithme ILP
        const ilpResult = this.algorithmService.runAlgorithmOnSingleModel('ilp', model);
        allResults[model.key].ilpResult = ilpResult;
        
        // COMPL√âTER l'√©tape apr√®s succ√®s
        await this.completeStep(stepILPId, `ILP termin√© pour ${model.label}`);
        
      } catch (error) {
        console.error(`‚ùå Erreur ILP pour ${model.key}:`, error);
        allResults[model.key].ilpResult = null;
        await this.completeStep(stepILPId, `ILP √©chou√© pour ${model.label}`);
      }
    }
    
    return allResults;
  },

  /**
   * NOUVEAU: Active une √©tape (√©tat "en cours")
   */
  activateStep: async function(stepId, message) {
    const step = document.getElementById(stepId);
    if (step) {
      // Marquer comme actif
      step.classList.add('active');
      step.classList.remove('completed');
      
      // Mettre √† jour le message
      UIUtils.setLoadingStepText(message);
      
      // Petite pause pour l'effet visuel
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    console.log(`üü° √âtape ${stepId} activ√©e: ${message}`);
  },

  /**
   * AM√âLIOR√â: Compl√®te une √©tape avec animation
   */
  completeStep: async function(stepId, message) {
    const step = document.getElementById(stepId);
    if (step) {
      // Attendre un peu pour l'effet visuel de l'ex√©cution
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // Marquer comme compl√©t√©
      step.classList.remove('active');
      step.classList.add('completed');
      
      // Mettre √† jour le message
      UIUtils.setLoadingStepText(message);
      
      // Petite pause avant l'√©tape suivante
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    console.log(`‚úÖ √âtape ${stepId} termin√©e: ${message}`);
  },

  /**
   * NOUVEAU: Effectue la comparaison finale et s√©lection des meilleurs r√©sultats
   */
  runFinalComparison: async function(allResults) {
    const stepCompareId = 'step-compare';
    
    // ACTIVER l'√©tape de comparaison
    await this.activateStep(stepCompareId, 'Comparaison des algorithmes et s√©lection...');
    
    console.log('üîÑ Comparaison finale des r√©sultats');
    
    const modelResults = {};
    
    // Comparer et s√©lectionner pour chaque mod√®le
    for (const [modelKey, results] of Object.entries(allResults)) {
      const { ffdResult, ilpResult } = results;
      
      if (ffdResult || ilpResult) {
        const bestResult = this.algorithmService.selectBestForModel(modelKey, ffdResult, ilpResult);
        modelResults[modelKey] = bestResult;
      }
    }
    
    // Construire les r√©sultats finaux
    const finalResults = this.algorithmService.buildFinalResults(modelResults);
    
    // COMPL√âTER l'√©tape de comparaison
    await this.completeStep(stepCompareId, 'Comparaison termin√©e');
    
    return finalResults;
  },

  /**
   * AM√âLIOR√â: Ex√©cute l'√©tape de g√©n√©ration PGM
   */
  runPgmGenerationStep: async function() {
    const stepPgmId = 'step-pgm';
    
    // ACTIVER l'√©tape PGM
    await this.activateStep(stepPgmId, 'G√©n√©ration des fichiers PGM...');
    
    try {
      // G√©n√©ration r√©elle des PGM
      this.currentPgmObjects = this.pgmManager.generatePgmObjects(this.currentResults);
      ResultsRenderer.renderResults(this.currentResults, this.algorithmService);
      this.resultsHandler.generatePgmPreviews();
      
      // COMPL√âTER l'√©tape PGM
      await this.completeStep(stepPgmId, 'Fichiers PGM g√©n√©r√©s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration PGM:', error);
      await this.completeStep(stepPgmId, 'Erreur g√©n√©ration PGM');
      this.showNotification('Erreur lors de la g√©n√©ration des aper√ßus PGM', 'warning');
    }
  },

  /**
   * CORRIG√â: Lance l'optimisation avec l'√©tape transform bien g√©r√©e
   */
  runOptimization: async function() {
    try {
      this.saveOriginalDataState();
      this.clearOptimizationResults();

      const data = this.dataManager.getData();
      console.log('üîç V√©rification des donn√©es avant optimisation...');
      this.logDataStatistics(data);

      if (!this.validateDataForOptimization(data)) {
        return;
      }

      UIUtils.showLoadingOverlay();
      const progress = document.querySelector('#loading-overlay .loading-progress');
      if (progress) progress.style.display = 'none';

      // === 1. CR√âATION DES MOD√àLES ===
      // Cr√©ation des mod√®les AVANT g√©n√©ration des √©tapes
      const models = this.algorithmService.createModelsFromDataManager();
      console.log(`üìã ${models.length} mod√®les cr√©√©s`);

      // === 2. G√âN√âRATION DES √âTAPES ===
      this.generateExecutionSteps(models);
      
      // === 3. √âTAPE TRANSFORM ===
      await this.activateStep('step-transform', 'Pr√©paration des mod√®les...');
      await new Promise(resolve => setTimeout(resolve, 500)); // Simulation du temps de pr√©paration
      await this.completeStep('step-transform', 'Mod√®les pr√™ts');

      // === 4. EX√âCUTION R√âELLE √âTAPE PAR √âTAPE ===
      const allResults = await this.runRealAlgorithmSteps(models);

      // === 5. COMPARAISON FINALE ===
      const finalResults = await this.runFinalComparison(allResults);
      this.currentResults = finalResults;

      // === 6. G√âN√âRATION DES PGM ===
      await this.runPgmGenerationStep();

      // === 7. AFFICHAGE DES R√âSULTATS ===
      await new Promise(resolve => setTimeout(resolve, 400));
      this.showResultsTabs();

    } catch (error) {
      console.error('Erreur lors de l\'optimisation:', error);
      this.showNotification(`Erreur: ${error.message}`, 'error');
      this.restoreOriginalDataState();
      this.clearOptimizationResults();
    } finally {
      UIUtils.hideLoadingOverlay();
      UIUtils.showLoadingProgressBar();
    }
  },

  /**
   * Cr√©e un √©l√©ment div pour une √©tape
   */
  createStepDiv: function(id, icon, label) {
    const div = document.createElement('div');
    div.className = 'loading-step';
    div.id = id;
    div.innerHTML = `<div class="step-icon">${icon}</div><span>${label}</span>`;
    return div;
  },

  /**
   * Validation plus robuste avec d√©bogage d√©taill√©
   */
  validateDataForOptimization: function(data) {
    console.log('üîç === VALIDATION DES DONN√âES ===');
    
    if (!data) {
      console.error('‚ùå Aucune donn√©e disponible');
      this.showNotification('Aucune donn√©e disponible pour l\'optimisation', 'error');
      return false;
    }
    
    if (!data.pieces || !data.motherBars) {
      console.error('‚ùå Structure de donn√©es invalide');
      this.showNotification('Structure de donn√©es corrompue', 'error');
      return false;
    }
    
    // V√©rifier qu'il y a des pi√®ces
    let totalPieces = 0;
    let pieceDetails = [];
    for (const profile in data.pieces) {
      for (const piece of data.pieces[profile]) {
        totalPieces += piece.quantity;
        pieceDetails.push(`${profile}: ${piece.quantity}√ó${piece.length}cm`);
      }
    }
    
    console.log(`üì¶ Pi√®ces trouv√©es: ${totalPieces}`);
    if (pieceDetails.length > 0) {
      console.log('   D√©tail:', pieceDetails.slice(0, 5).join(', ') + (pieceDetails.length > 5 ? '...' : ''));
    }
    
    if (totalPieces === 0) {
      console.error('‚ùå Aucune pi√®ce √† d√©couper trouv√©e');
      this.showNotification('Aucune pi√®ce √† d√©couper. Veuillez d\'abord importer des barres.', 'error');
      return false;
    }
    
    // V√©rifier qu'il y a des barres m√®res
    let totalMotherBars = 0;
    let motherDetails = [];
    for (const profile in data.motherBars) {
      for (const bar of data.motherBars[profile]) {
        totalMotherBars += bar.quantity;
        motherDetails.push(`${profile}: ${bar.quantity}√ó${bar.length}cm`);
      }
    }
    
    console.log(`üìè Barres m√®res trouv√©es: ${totalMotherBars}`);
    if (motherDetails.length > 0) {
      console.log('   D√©tail:', motherDetails.slice(0, 5).join(', ') + (motherDetails.length > 5 ? '...' : ''));
    }
    
    if (totalMotherBars === 0) {
      console.error('‚ùå Aucune barre m√®re disponible');
      this.showNotification('Aucune barre m√®re disponible. Veuillez d\'abord ajouter des barres m√®res.', 'error');
      return false;
    }
    
    // V√©rifier la coh√©rence des profils
    const pieceProfiles = Object.keys(data.pieces);
    const motherBarProfiles = Object.keys(data.motherBars);
    
    console.log(`üîß Profils pi√®ces: ${pieceProfiles.join(', ')}`);
    console.log(`üìè Profils barres: ${motherBarProfiles.join(', ')}`);
    
    const missingProfiles = pieceProfiles.filter(profile => !motherBarProfiles.includes(profile));
    if (missingProfiles.length > 0) {
      console.error(`‚ùå Profils manquants: ${missingProfiles.join(', ')}`);
      this.showNotification(
        `Profils manquants dans les barres m√®res: ${missingProfiles.join(', ')}. 
         Veuillez ajouter des barres m√®res pour ces profils.`, 
        'error'
      );
      return false;
    }
    
    console.log('‚úÖ Validation des donn√©es r√©ussie');
    console.log('üîç ===============================');
    return true;
  },

  /**
   * Affiche les onglets de r√©sultats
   */
  showResultsTabs: function() {
    try {
      // Basculer vers la section r√©sultats
      this.showSection('result-section');
      
      // Scroll en haut de la page pour une UX optimale
      window.scrollTo({ top: 0, behavior: 'smooth' });

      // S'assurer que le contenu est visible
      const resultsContainer = document.getElementById('results-container');
      if (resultsContainer && resultsContainer.innerHTML.trim() === '') {
        console.warn('‚ö†Ô∏è Le conteneur de r√©sultats est vide');
      }
      
      console.log('üìä Onglets de r√©sultats affich√©s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'affichage des onglets:', error);
    }
  },
};