"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateparser_optimizer"]("main",{

/***/ "./src/js/parser.js":
/*!**************************!*\
  !*** ./src/js/parser.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/**\r\n * Analyseur pour fichiers .nc2\r\n * Suit l'algorithme du diagramme de flux pour déterminer l'orientation et calculer les angles\r\n */\n\n// Configuration pour la structure du tableau 3D des valeurs AK\nvar AK_index = {\n  'paragraphes': 3,\n  'colonnes': 6,\n  'lignes': 5,\n  'defaut': -0.00\n};\nvar Parser = {\n  /**\r\n   * Analyse un fichier .nc2 en suivant l'algorithme du diagramme de flux\r\n   * @param {string} contenu - Contenu du fichier .nc2\r\n   * @returns {Object} - Barre analysée\r\n   */\n  parseNC2: function parseNC2(contenu) {\n    console.log(\"Analyse du fichier NC2...\");\n    var lignes = contenu.split('\\n').map(function (ligne) {\n      return ligne.trim();\n    });\n    var barreActuelle = this.initialiserNouvelleBarre();\n\n    // Analyser les premières valeurs par lignes\n    this.analyserInfosDeBaseBarre(barreActuelle, lignes);\n\n    // Analyser les tableaux des sections AK\n    var AK_valeurs = this.construireTableauAK3D(lignes);\n\n    // Récupérer les angles et l'orientation depuis AK\n    this.analyserAnglesEtOrientation(barreActuelle, AK_valeurs);\n\n    // Générer les codes F4C\n    this.genererCodesF4C(barreActuelle, AK_valeurs);\n\n    // Afficher la barre analysée pour le débogage\n    console.log(\"Barre analysée:\", barreActuelle);\n    return barreActuelle;\n  },\n  /**\r\n   * Initialise une nouvelle barre\r\n   * @returns {Object} - Objet barre initialisé\r\n   */\n  initialiserNouvelleBarre: function initialiserNouvelleBarre() {\n    return {\n      nom: '',\n      profil: '',\n      quantite: 1,\n      longueur: 0,\n      hauteur: 0,\n      largeur: 0,\n      orientation: '',\n      angle_1: 0,\n      angle_2: 0,\n      // Propriétés pour F4C\n      B021: '',\n      B035: '',\n      S051: '',\n      S052: '',\n      S053: '',\n      S054: '',\n      S055: '',\n      S058: ''\n    };\n  },\n  /**\r\n   * Analyse les informations de base d'une barre\r\n   * @param {Object} barreActuelle - Barre en cours de traitement\r\n   * @param {Array} lignes - Toutes les lignes du fichier\r\n   */\n  analyserInfosDeBaseBarre: function analyserInfosDeBaseBarre(barreActuelle, lignes) {\n    for (var i = 0; i < lignes.length; i++) {\n      var ligne = lignes[i];\n      var indexLigne = i + 1; // Pour l'indexation base 1\n\n      // Nom de la barre\n      if (indexLigne == 2) {\n        barreActuelle.nom = ligne.replace('**', '').split('.nc')[0].trim();\n      }\n\n      // Quantité\n      if (indexLigne == 8) {\n        var quantite = parseInt(ligne.split('.')[0].trim());\n        if (!isNaN(quantite)) {\n          barreActuelle.quantite = quantite;\n        }\n      }\n\n      // Profil (ex: HEA100, IPE200, etc.)\n      if (indexLigne == 9) {\n        barreActuelle.profil = ligne.trim();\n      }\n\n      // Longueur\n      if (indexLigne == 11) {\n        var longueur = parseInt(ligne.split('.')[0].trim());\n        barreActuelle.longueur = longueur;\n      }\n\n      // Hauteur\n      if (indexLigne == 12) {\n        var hauteur = parseInt(ligne.split('.')[0].trim());\n        barreActuelle.hauteur = hauteur;\n      }\n\n      // Largeur\n      if (indexLigne == 13) {\n        var largeur = parseInt(ligne.split('.')[0].trim());\n        barreActuelle.largeur = largeur;\n      }\n    }\n  },\n  /**\r\n   * Analyse les angles et l'orientation de la barre à partir des valeurs AK\r\n   * @param {Object} barre - Barre à traiter\r\n   * @param {Array} AK_valeurs - Tableau 3D des valeurs AK\r\n   */\n  analyserAnglesEtOrientation: function analyserAnglesEtOrientation(barre, AK_valeurs) {\n    var AK_v4 = AK_valeurs[1][4]; // Première section AK, colonne 4\n    var AK_o4 = AK_valeurs[2][4]; // Deuxième section AK, colonne 4\n\n    if (AK_v4[2] != 0 || AK_v4[4] != 0) {\n      barre.angle_1 = AK_v4[4];\n      barre.angle_2 = AK_v4[2];\n      barre.orientation = 'debout';\n    } else if (AK_o4[1] != 0 || AK_o4[3] != 0) {\n      barre.angle_1 = AK_o4[1] != 0 ? -AK_o4[1] : AK_o4[1];\n      barre.angle_2 = AK_o4[3] != 0 ? -AK_o4[3] : AK_o4[3];\n      barre.orientation = 'a-plat';\n    } else {\n      barre.angle_1 = 0.00;\n      barre.angle_2 = 0.00;\n      barre.orientation = 'a-plat';\n    }\n  },\n  /**\r\n   * Génère les codes F4C\r\n   * @param {Object} barre - Barre à traiter\r\n   * @param {Array} AK_valeurs - Tableau 3D des valeurs AK\r\n   */\n  genererCodesF4C: function genererCodesF4C(barre, AK_valeurs) {\n    // B021 = Code profilé à 3 lettres + 5 espaces\n    barre.B021 = barre.profil.substring(0, 3) + '     ';\n\n    // B035 = Longueur du profil en centimètres\n    var racine_B035 = barre.orientation == 'debout' ? barre.largeur : barre.hauteur;\n    barre.B035 = Math.round(racine_B035 * 10000).toString();\n\n    // S052 et S053 = Quantité\n    barre.S052 = barre.quantite.toString();\n    barre.S053 = barre.quantite.toString();\n\n    // S054 et S055 = Angles (en centièmes de degré)\n    barre.S054 = Math.round((90 + barre.angle_1) * 100).toString();\n    barre.S055 = Math.round((90 + barre.angle_2) * 100).toString();\n\n    // S051 = longueur en fonction des angles\n    var position_AK_S051 = [0, 0, 0];\n    var S058;\n    if (barre.orientation === 'a-plat') {\n      if (barre.angle_1 > 0) {\n        position_AK_S051 = [1, 1, 4]; // AK v(1;4)\n        S058 = 2;\n      } else {\n        position_AK_S051 = [1, 1, 2]; // AK v(1;2)\n        S058 = 1;\n      }\n    } else if (barre.orientation === 'debout') {\n      if (barre.angle_1 < 0) {\n        position_AK_S051 = [2, 1, 2]; // AK o(1;2)\n        S058 = 1;\n      } else {\n        position_AK_S051 = [2, 1, 4]; // AK o(1;4)\n        S058 = 2;\n      }\n    }\n    barre.S051 = Math.round(AK_valeurs[position_AK_S051[0]][position_AK_S051[1]][position_AK_S051[2]] * 10000).toString();\n    barre.S058 = S058.toString();\n  },\n  /**\r\n   * Initialise un tableau 3D pour les valeurs AK avec indexation base 1\r\n   * @returns {Array} - Tableau 3D initialisé\r\n   */\n  initialiserValeursAK: function initialiserValeursAK() {\n    var AK_valeurs;\n    // Structure: AK_valeurs[paragraphe][colonne][ligne] (indexation base 1)\n\n    // Créer des tableaux avec +1 de taille pour accommoder l'indexation base 1\n    AK_valeurs = new Array(AK_index.paragraphes + 1);\n    for (var i = 0; i <= AK_index.paragraphes; i++) {\n      AK_valeurs[i] = new Array(AK_index.colonnes + 1);\n      for (var j = 0; j <= AK_index.colonnes; j++) {\n        AK_valeurs[i][j] = new Array(AK_index.lignes + 1);\n        for (var k = 0; k <= AK_index.lignes; k++) {\n          AK_valeurs[i][j][k] = AK_index.defaut;\n        }\n      }\n    }\n    return AK_valeurs;\n  },\n  /**\r\n   * Construit le tableau AK 3D à partir des lignes du fichier NC avec indexation base 1\r\n   * @param {Array} lignes - Lignes du fichier NC\r\n   * @returns {Array} - Tableau AK 3D rempli\r\n   */\n  construireTableauAK3D: function construireTableauAK3D(lignes) {\n    // Initialiser le tableau AK_valeurs\n    var AK_valeurs = this.initialiserValeursAK();\n\n    // Remplir le tableau AK_valeurs avec les données du fichier NC\n    var paragrapheActuel = 0; // Commence à 0, sera incrémenté à 1\n    var ligneDansParagraphe = 0; // Sera incrémenté à 1\n    var dansParagrapheAK = false;\n    for (var i = 0; i < lignes.length; i++) {\n      var ligne = lignes[i];\n\n      // Détecter le début d'un paragraphe AK\n      if (ligne.startsWith('AK')) {\n        dansParagrapheAK = true;\n        paragrapheActuel++; // Incrémenter pour obtenir une indexation base 1 (1, 2, 3)\n\n        // Vérifier qu'on ne dépasse pas le nombre de paragraphes définis\n        if (paragrapheActuel > AK_index.paragraphes) {\n          console.warn(\"Limite du nombre de paragraphes AK atteinte (\".concat(AK_index.paragraphes, \")\"));\n          break;\n        }\n        ligneDansParagraphe = 0; // Réinitialiser le compteur de lignes\n        continue;\n      }\n\n      // Détecter la fin d'un paragraphe AK\n      if (ligne.startsWith('EN')) {\n        dansParagrapheAK = false;\n        continue;\n      }\n\n      // Traiter les lignes à l'intérieur d'un paragraphe AK\n      if (dansParagrapheAK && ligne.trim() !== '') {\n        ligneDansParagraphe++; // Incrémenter pour obtenir une indexation base 1\n\n        // Limiter au nombre de lignes défini dans AK_index\n        if (ligneDansParagraphe > AK_index.lignes) {\n          console.warn(\"Limite de lignes dans le paragraphe AK \".concat(paragrapheActuel, \" atteinte (limite: \").concat(AK_index.lignes, \")\"));\n          continue;\n        }\n\n        // Séparer les valeurs et supprimer l'identifiant (v, o, u) s'il est présent\n        var valeurs = ligne.trim().split(/\\s+/);\n        if (valeurs.length > 0 && /^[a-zA-Z]/.test(valeurs[0])) {\n          valeurs.shift(); // Supprimer l'identifiant (v, o, u)\n        }\n\n        // Stocker chaque valeur dans le tableau AK_valeurs avec indexation base 1\n        for (var col = 0; col < valeurs.length && col < AK_index.colonnes; col++) {\n          var valeur = valeurs[col];\n\n          // Supprimer une quelconque lettre à la fin si présente\n          if (valeur.length > 0) {\n            valeur = valeur.replace(/[a-zA-Z]$/, '');\n          }\n\n          // Convertir en nombre et stocker avec indexation base 1\n          AK_valeurs[paragrapheActuel][col + 1][ligneDansParagraphe] = parseFloat(valeur) || 0;\n        }\n      }\n    }\n    return AK_valeurs;\n  }\n};\n\n//# sourceURL=webpack://parser-optimizer/./src/js/parser.js?\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("7f1049f5821bf1be39b7")
/******/ })();
/******/ 
/******/ }
);